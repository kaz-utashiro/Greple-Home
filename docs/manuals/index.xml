<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Greple Home – Manuals</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/</link><description>Recent content in Manuals on Greple Home</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://kaz-utashiro.github.io/Greple-Home/docs/manuals/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: greple</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/greple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/greple/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple/actions">&lt;img src="https://github.com/kaz-utashiro/greple/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple">&lt;img src="https://badge.fury.io/pl/App-Greple.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>greple - extensible grep with lexical expression and region control&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 8.59&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>&lt;strong>greple&lt;/strong> [&lt;strong>-M&lt;/strong>&lt;em>module&lt;/em>] [ &lt;strong>-options&lt;/strong> ] pattern [ file&amp;hellip; ]&lt;/p>
&lt;pre>&lt;code>PATTERN
pattern 'and +must -not ?alternative &amp;amp;function'
-x, --le pattern lexical expression (same as bare pattern)
-e, --and pattern pattern match across line boundary
-r, --must pattern pattern cannot be compromised
-v, --not pattern pattern not to be matched
--or pattern alternative pattern group
--re pattern regular expression
--fe pattern fixed expression
-f, --file file file contains search pattern
--select index select indexed pattern from -f file
MATCH
-i ignore case
--need=[+-]n required positive match count
--allow=[+-]n acceptable negative match count
--matchcount=n[,m] required match count for each block
STYLE
-l list filename only
-c print count of matched block only
-n print line number
-H, -h do or do not display filenames
-o print only the matching part
--all print entire data
-m, --max=n[,m] max count of blocks to be shown
-A,-B,-C [n] after/before/both match context
--join delete newline in the matched part
--joinby=string replace newline in the matched text by string
--nonewline do not add newline character at block end
--filestyle=style how filename printed (once, separate, line)
--linestyle=style how line number printed (separate, line)
--separate set filestyle and linestyle both &amp;quot;separate&amp;quot;
--format LABEL=... define line number and file name format
--frame-top top frame
--frame-middle middle frame
--frame-bottom bottom frame
FILE
--glob=glob glob target files
--chdir=dir change directory before search
--readlist get filenames from stdin
COLOR
--color=when use terminal color (auto, always, never)
--nocolor same as --color=never
--colormap=color R, G, B, C, M, Y etc.
--colorful use default multiple colors
--colorindex=flags color index method: Ascend/Descend/Block/Random
--ansicolor=s ANSI color 16, 256 or 24bit
--[no]256 same as --ansicolor 256 or 16
--regioncolor use different color for inside/outside regions
--uniqcolor use different color for unique string
--uniqsub=func preprocess function before check uniqueness
--random use random color each time
--face set/unset visual effects
BLOCK
-p, --paragraph paragraph mode
--border=pattern border pattern
--block=pattern block of records
--blockend=s block end mark (Default: &amp;quot;--&amp;quot;)
--join-blocks join back-to-back consecutive blocks
REGION
--inside=pattern select matches inside of pattern
--outside=pattern select matches outside of pattern
--include=pattern reduce matches to the area
--exclude=pattern reduce matches to outside of the area
--strict strict mode for --inside/outside --block
CHARACTER CODE
--icode=name file encoding
--ocode=name output encoding
FILTER
--if,--of=filter input/output filter command
--pf=filter post process filter command
--noif disable default input filter
RUNTIME FUNCTION
--print=func print function
--continue continue after print function
--callback=func callback function for matched string
--begin=func call function before search
--end=func call function after search
--prologue=func call function before command execution
--epilogue=func call function after command execution
OTHER
--usage[=expand] show this message
--exit=n command exit status
--norc skip reading startup file
--man display command or module manual page
--show display module file
--path show module file path
--persist same as --error=retry
--error=action action after read error
--warn=type run time error control
--alert [name=#] set alert parameter (size/time)
-d flags display info (f:file d:dir c:color m:misc s:stat)
&lt;/code>&lt;/pre>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;pre>&lt;code>$ cpanm App::Greple
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;h3 id="multiple-keywords">MULTIPLE KEYWORDS&lt;/h3>
&lt;p>&lt;strong>greple&lt;/strong> has almost same function as Unix command &lt;a href="http://man.he.net/man1/egrep">egrep(1)&lt;/a> but
search is done in a manner similar to Internet search engine. For
example, next command print lines those contain all of &lt;code>foo&lt;/code> and
&lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple 'foo bar baz' ...
&lt;/code>&lt;/pre>
&lt;p>Each word can appear in any order and any place in the string. So
this command find all of following lines.&lt;/p>
&lt;pre>&lt;code>foo bar baz
baz bar foo
the foo, bar and baz
&lt;/code>&lt;/pre>
&lt;p>If you want to use OR syntax, prepend question mark (&lt;code>?&lt;/code>) on each
token, or use regular expression.&lt;/p>
&lt;pre>&lt;code>greple 'foo bar baz ?yabba ?dabba ?doo'
greple 'foo bar baz yabba|dabba|doo'
&lt;/code>&lt;/pre>
&lt;p>This command will print lines those contains all of &lt;code>foo&lt;/code>, &lt;code>bar&lt;/code> and
&lt;code>baz&lt;/code> and one or more of &lt;code>yabba&lt;/code>, &lt;code>dabba&lt;/code> or &lt;code>doo&lt;/code>.&lt;/p>
&lt;p>NOT operator can be specified by prefixing the token by minus sign
(&lt;code>-&lt;/code>). Next example will show lines those contain both &lt;code>foo&lt;/code> and
&lt;code>bar&lt;/code> but none of &lt;code>yabba&lt;/code>, &lt;code>dabba&lt;/code> or &lt;code>doo&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple 'foo bar -yabba -dabba -doo'
&lt;/code>&lt;/pre>
&lt;p>This can be written as this using &lt;strong>-e&lt;/strong> and &lt;strong>-v&lt;/strong> option.&lt;/p>
&lt;pre>&lt;code>greple -e foo -e bar -v yabba -v dabba -v doo
greple -e foo -e bar -v 'yabba|dabba|doo'
&lt;/code>&lt;/pre>
&lt;p>If &lt;code>+&lt;/code> is placed to positive matching pattern, that pattern is marked
as required, and required match count is automatically set to the
number of required patterns. So&lt;/p>
&lt;pre>&lt;code>greple '+foo bar baz'
&lt;/code>&lt;/pre>
&lt;p>commands implicitly set the option &lt;code>--need 1&lt;/code>, and consequently print
all lines including &lt;code>foo&lt;/code>. In other words, it makes other patterns
optional, but they are highlighted if exist. If you want to search
lines which includes &lt;code>foo&lt;/code> and either or both of &lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>,
use like this:&lt;/p>
&lt;pre>&lt;code>greple '+foo bar baz' --need 2
greple '+foo bar baz' --need +1
greple 'foo bar|baz'
&lt;/code>&lt;/pre>
&lt;h3 id="flexible-blocks">FLEXIBLE BLOCKS&lt;/h3>
&lt;p>Default data block &lt;strong>greple&lt;/strong> search and print is a line. Using
&lt;strong>&amp;ndash;paragraph&lt;/strong> (or &lt;strong>-p&lt;/strong> in short) option, series of text separated by
empty line is taken as a record block. So next command will print
whole paragraph which contains the word &lt;code>foo&lt;/code>, &lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple -p 'foo bar baz'
&lt;/code>&lt;/pre>
&lt;p>Block also can be defined by pattern. Next command treat the data as
a series of 10-line unit.&lt;/p>
&lt;pre>&lt;code>greple -n --border='(.*\n){1,10}'
&lt;/code>&lt;/pre>
&lt;p>You can also define arbitrary complex blocks by writing script.&lt;/p>
&lt;pre>&lt;code>greple --block '&amp;amp;your_original_function' ...
&lt;/code>&lt;/pre>
&lt;h3 id="match-area-control">MATCH AREA CONTROL&lt;/h3>
&lt;p>Using option &lt;strong>&amp;ndash;inside&lt;/strong> and &lt;strong>&amp;ndash;outside&lt;/strong>, you can specify the text
area to be matched. Next commands search only in mail header and body
area respectively. In these cases, data block is not changed, so
print lines which contains the pattern in the specified area.&lt;/p>
&lt;pre>&lt;code>greple --inside '\A(.+\n)+' pattern
greple --outside '\A(.+\n)+' pattern
&lt;/code>&lt;/pre>
&lt;p>Option &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>&amp;ndash;outside&lt;/strong> can be used repeatedly to enhance the
area to be matched. There are similar option
&lt;strong>&amp;ndash;include&lt;/strong>/&lt;strong>&amp;ndash;exclude&lt;/strong>, but they are used to trim down the area.&lt;/p>
&lt;p>These four options also take user defined function and any complex
region can be used.&lt;/p>
&lt;h3 id="line-across-match">LINE ACROSS MATCH&lt;/h3>
&lt;p>&lt;strong>greple&lt;/strong> search a given pattern across line boundaries. This is
especially useful to handle Asian multi-byte text, more specifically
Japanese. Japanese text can be separated by newline almost any place
in the text. So the search pattern may spread out onto multiple
lines.&lt;/p>
&lt;p>As for ascii word list, space character in the pattern matches any
kind of space including newline. Next example will search the word
sequence of &lt;code>foo&lt;/code>, &lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>, even they spread out to
multiple lines.&lt;/p>
&lt;pre>&lt;code>greple -e 'foo bar baz'
&lt;/code>&lt;/pre>
&lt;p>Option &lt;strong>-e&lt;/strong> is necessary because space is taken as a token separator
in the bare or &lt;strong>&amp;ndash;le&lt;/strong> pattern.&lt;/p>
&lt;h3 id="module-and-customization">MODULE AND CUSTOMIZATION&lt;/h3>
&lt;p>User can define default and original options in &lt;code>~/.greplerc&lt;/code>. Next
example enables colored output always, and define new option using
macro processing.&lt;/p>
&lt;pre>&lt;code>option default --color=always
define :re1 complex-regex-1
define :re2 complex-regex-2
define :re3 complex-regex-3
option --newopt --inside :re1 --exclude :re2 --re :re3
&lt;/code>&lt;/pre>
&lt;p>Specific set of function and option interface can be implemented as
module. Modules are invoked by &lt;strong>-M&lt;/strong> option immediately after command
name.&lt;/p>
&lt;p>For example, &lt;strong>greple&lt;/strong> does not have recursive search option, but it
can be implemented by &lt;strong>&amp;ndash;readlist&lt;/strong> option which accept target file
list from standard input. Using &lt;strong>find&lt;/strong> module, it can be written
like this:&lt;/p>
&lt;pre>&lt;code>greple -Mfind . -type f -- pattern
&lt;/code>&lt;/pre>
&lt;p>Also &lt;strong>dig&lt;/strong> module implements more complex search. It can be used as
simple as this:&lt;/p>
&lt;pre>&lt;code>greple -Mdig pattern --dig .
&lt;/code>&lt;/pre>
&lt;p>but this command is finally translated into following option list.&lt;/p>
&lt;pre>&lt;code>greple -Mfind . ( -name .git -o -name .svn -o -name RCS ) -prune -o
-type f ! -name .* ! -name *,v ! -name *~
! -iname *.jpg ! -iname *.jpeg ! -iname *.gif ! -iname *.png
! -iname *.tar ! -iname *.tbz ! -iname *.tgz ! -iname *.pdf
-print -- pattern
&lt;/code>&lt;/pre>
&lt;h3 id="included-modues">INCLUDED MODUES&lt;/h3>
&lt;p>This release include some sample modules. Read document in each
modules for detail. You can read the document by &lt;strong>&amp;ndash;man&lt;/strong> option or
&lt;a href="https://metacpan.org/pod/perldoc">perldoc&lt;/a> command.&lt;/p>
&lt;pre>&lt;code>greple -Mdig --man
perldoc App::Greple::dig
&lt;/code>&lt;/pre>
&lt;p>When it does not work, use &lt;code>perldoc App::Greple::dig&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>colors&lt;/strong>&lt;/p>
&lt;p>Color variation module.
See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Acolors">App::Greple::colors&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>find&lt;/strong>&lt;/p>
&lt;p>Module to use &lt;a href="http://man.he.net/man1/find">find(1)&lt;/a> command to help recursive search.
See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Afind">App::Greple::find&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dig&lt;/strong>&lt;/p>
&lt;p>Module for recursive search using &lt;strong>find&lt;/strong> module. Defines &lt;strong>&amp;ndash;dig&lt;/strong>,
&lt;strong>&amp;ndash;git&lt;/strong> and &lt;strong>&amp;ndash;git-r&lt;/strong> options. See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Adig">App::Greple::dig&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pgp&lt;/strong>&lt;/p>
&lt;p>Module to search &lt;strong>pgp&lt;/strong> files.
See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Apgp">App::Greple::pgp&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>select&lt;/strong>&lt;/p>
&lt;p>Module to select files.
See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Aselect">App::Greple::select&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>perl&lt;/strong>&lt;/p>
&lt;p>Sample module to search from perl source files.
See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Aperl">App::Greple::perl&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Other modules are available at CPAN, or git repository
&lt;a href="https://github.com/kaz-utashiro/">https://github.com/kaz-utashiro/&lt;/a>.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;h3 id="patterns">PATTERNS&lt;/h3>
&lt;p>If no specific option is given, &lt;strong>greple&lt;/strong> takes the first argument as
a search pattern specified by &lt;strong>&amp;ndash;le&lt;/strong> option. All of these patterns
can be specified multiple times.&lt;/p>
&lt;p>Command itself is written in Perl, and any kind of Perl style regular
expression can be used in patterns. See &lt;a href="http://man.he.net/man1/perlre">perlre(1)&lt;/a> for detail.&lt;/p>
&lt;p>Note that multiple line modifier (&lt;code>m&lt;/code>) is set when executed, so put
&lt;code>(?-m)&lt;/code> at the beginning of regex if you want to explicitly disable
it.&lt;/p>
&lt;p>Order of capture group in the pattern is not guaranteed. Please avoid
to use direct index, and use relative or named capture group instead.
For example, if you want to search repeated characters, use
&lt;code>(\w)\g{-1}&lt;/code> or &lt;code>(?&amp;lt;c&amp;gt;\w)\g{c}&lt;/code> rather than
&lt;code>(\w)\1&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>-x&lt;/strong> &lt;em>pattern&lt;/em>, &lt;strong>&amp;ndash;le&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Treat the string as a collection of tokens separated by spaces. Each
token is interpreted by the first character. Token start with &lt;code>-&lt;/code>
means negative pattern, &lt;code>?&lt;/code> means alternative, and &lt;code>+&lt;/code> does
required.&lt;/p>
&lt;p>Next example print lines which contains &lt;code>foo&lt;/code> and &lt;code>bar&lt;/code>, and one or
more of &lt;code>yabba&lt;/code> and &lt;code>dabba&lt;/code>, and none of &lt;code>baz&lt;/code> and &lt;code>doo&lt;/code>.&lt;/p>
&lt;pre>&lt;code> greple --le='foo bar -baz ?yabba ?dabba -doo'
&lt;/code>&lt;/pre>
&lt;p>Multiple &lt;code>?&lt;/code> preceded tokens are treated all mixed together. That
means &lt;code>?A|B ?C|D&lt;/code> is equivalent to &lt;code>?A|B|C|D&lt;/code>. If you
want to mean &lt;code>(A or B)&lt;/code> and &lt;code>(C or D)&lt;/code>, use AND syntax
instead: &lt;code>A|B C|D&lt;/code>.&lt;/p>
&lt;p>This is the summary of start character for &lt;strong>&amp;ndash;le&lt;/strong> option:&lt;/p>
&lt;pre>&lt;code> + Required pattern
- Negative match pattern
? Alternative pattern
&amp;amp; Function call (see next section)
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-x&lt;/strong>=[&lt;strong>+-&lt;/strong>]&lt;strong>&amp;amp;&lt;/strong>&lt;em>function&lt;/em>, &lt;strong>&amp;ndash;le&lt;/strong>=[&lt;strong>+-&lt;/strong>]&lt;strong>&amp;amp;&lt;/strong>&lt;em>function&lt;/em>&lt;/p>
&lt;p>If the pattern start with ampersand (&lt;code>&amp;amp;&lt;/code>), it is treated as a
function, and the function is called instead of searching pattern.
Function call interface is same as the one for block/region options.&lt;/p>
&lt;p>If you have a definition of &lt;em>odd_line&lt;/em> function in you &lt;code>.greplerc&lt;/code>,
which is described in this manual later, you can print odd number
lines like this:&lt;/p>
&lt;pre>&lt;code> greple -n '&amp;amp;odd_line' file
&lt;/code>&lt;/pre>
&lt;p>Required (&lt;code>+&lt;/code>) and negative (&lt;code>-&lt;/code>) mark can be used for function
pattern.&lt;/p>
&lt;p>This version experimentally support callback function for each
pattern. Region list returned by function can have two extra element
besides start/end position. Third element is index. Fourth element
is callback function pointer which is called to produce string to be
shown in command output. Callback function takes four argument (start
position, end position, index, matched string) and returns replacement
string.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-e&lt;/strong> &lt;em>pattern&lt;/em>, &lt;strong>&amp;ndash;and&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify positive match token. Next two commands are equivalent.&lt;/p>
&lt;pre>&lt;code> greple 'foo bar baz'
greple -e foo -e bar -e baz
&lt;/code>&lt;/pre>
&lt;p>First character is not interpreted, so next commands will search the
pattern &lt;code>-baz&lt;/code>.&lt;/p>
&lt;pre>&lt;code> greple -e -baz
&lt;/code>&lt;/pre>
&lt;p>Space characters are treated specially by &lt;strong>-e&lt;/strong> and &lt;strong>-v&lt;/strong> options.
They are replaced by the pattern which matches any number of white
spaces including newline. So the pattern can be expand to multiple
lines. Next commands search the series of word &lt;code>foo&lt;/code>, &lt;code>bar&lt;/code> and
&lt;code>baz&lt;/code> even if they are separated by newlines.&lt;/p>
&lt;pre>&lt;code> greple -e 'foo bar baz'
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-r&lt;/strong> &lt;em>pattern&lt;/em>, &lt;strong>&amp;ndash;must&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify required match token. Next two commands are equivalent.&lt;/p>
&lt;pre>&lt;code> greple '+foo bar baz'
greple -r foo -e bar -e baz
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-v&lt;/strong> &lt;em>pattern&lt;/em>, &lt;strong>&amp;ndash;not&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify negative match token. Because it does not affect to the bare
pattern argument, you can narrow down the search result like this.&lt;/p>
&lt;pre>&lt;code> greple foo file
greple foo file -v bar
greple foo file -v bar -v baz
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;or&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify logical-or match token group. Same as &lt;code>?&lt;/code> marked token in
&lt;strong>&amp;ndash;le&lt;/strong> option. Next commands are all equivalent.&lt;/p>
&lt;pre>&lt;code> greple --le 'foo bar ?yabba ?dabba'
greple --and foo --and bar --or yabba --or dabba
greple -e foo -e bar -e 'yabba|dabba'
&lt;/code>&lt;/pre>
&lt;p>Option &lt;strong>&amp;ndash;or&lt;/strong> group and each &lt;strong>&amp;ndash;le&lt;/strong> pattern makes individual
pattern. So&lt;/p>
&lt;pre>&lt;code> greple --le '?foo ?yabba' --le '?bar ?dabba' --or baz --or doo
&lt;/code>&lt;/pre>
&lt;p>is same as:&lt;/p>
&lt;pre>&lt;code> greple -e 'foo|yabba' -e 'bar|dabba' -e 'baz|doo'
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;re&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify regular expression. No special treatment for space and wide
characters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;fe&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify fixed string pattern, like fgrep.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-i&lt;/strong>, &lt;strong>&amp;ndash;ignore-case&lt;/strong>&lt;/p>
&lt;p>Ignore case.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;need&lt;/strong>=&lt;em>n&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;allow&lt;/strong>=&lt;em>n&lt;/em>&lt;/p>
&lt;p>Option to compromise matching condition. Option &lt;strong>&amp;ndash;need&lt;/strong> specifies
the required match count, and &lt;strong>&amp;ndash;allow&lt;/strong> the number of negative
condition to be overlooked.&lt;/p>
&lt;pre>&lt;code> greple --need=2 --allow=1 'foo bar baz -yabba -dabba -doo'
&lt;/code>&lt;/pre>
&lt;p>Above command prints the line which contains two or more from &lt;code>foo&lt;/code>,
&lt;code>bar&lt;/code> and &lt;code>baz&lt;/code>, and does not include more than one of &lt;code>yabba&lt;/code>,
&lt;code>dabba&lt;/code> or &lt;code>doo&lt;/code>.&lt;/p>
&lt;p>Using option &lt;strong>&amp;ndash;need&lt;/strong>=&lt;em>1&lt;/em>, &lt;strong>greple&lt;/strong> produces same result as &lt;strong>grep&lt;/strong>
command.&lt;/p>
&lt;pre>&lt;code> grep -e foo -e bar -e baz
greple -e foo -e bar -e baz --need=1
&lt;/code>&lt;/pre>
&lt;p>When the count &lt;em>n&lt;/em> is negative value, it is subtracted from default
value.&lt;/p>
&lt;p>If the option &lt;strong>&amp;ndash;need=0&lt;/strong> is specified and no pattern was found,
entire data is printed. This is true even for required pattern.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;matchcount&lt;/strong>=&lt;em>count&lt;/em>|&lt;em>min&lt;/em>,&lt;em>max&lt;/em>, &lt;strong>&amp;ndash;mc&lt;/strong>=&amp;hellip;&lt;/p>
&lt;p>When option &lt;strong>&amp;ndash;matchcount&lt;/strong> is specified, only blocks which have given
match count will be shown. Minimum and maximum number can be given,
connecting by comma, and they can be omitted. Next commands print
lines including semicolons; 3 or more, exactly 3, and 3 or less,
respectively.&lt;/p>
&lt;pre>&lt;code> greple --matchcount=3, ';' file
greple --matchcount=3 ';' file
greple --matchcount=,3 ';' file
&lt;/code>&lt;/pre>
&lt;p>In fact, &lt;em>min&lt;/em> and &lt;em>max&lt;/em> can repeat to represent multiple range.
Missing, negative or zero &lt;em>max&lt;/em> means infinite. Next command find
match count 0 to 10, 20 to 30, and 40-or-greater.&lt;/p>
&lt;pre>&lt;code> greple --matchcount=,10,20,30,40
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-f&lt;/strong> &lt;em>file&lt;/em>, &lt;strong>&amp;ndash;file&lt;/strong>=&lt;em>file&lt;/em>&lt;/p>
&lt;p>Specify the file which contains search pattern. When file contains
multiple lines, patterns are mixed together by OR context.&lt;/p>
&lt;p>Blank line and the line starting with sharp (#) character is ignored.
Two slashes (//) and following string are taken as a comment and
removed with preceding spaces.&lt;/p>
&lt;p>When multiple files specified, each file produces individual pattern.&lt;/p>
&lt;p>If the file name is followed by &lt;code>[index]&lt;/code> string, it is treated as
specified by &lt;strong>&amp;ndash;select&lt;/strong> option. Next two commands are equivalent.&lt;/p>
&lt;pre>&lt;code> greple -f pattern_file'[1,5:7]'
greple -f pattern_file --select 1,5:7
&lt;/code>&lt;/pre>
&lt;p>See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Asubst">App::Greple::subst&lt;/a> module.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;select&lt;/strong>=&lt;em>index&lt;/em>&lt;/p>
&lt;p>When you want to choose specific pattern in the pattern file provided
by &lt;strong>-f&lt;/strong> option, use &lt;strong>&amp;ndash;select&lt;/strong> option. &lt;em>index&lt;/em> is number list
separated by comma (,) character and each number is interpreted by
&lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3ANumbers">Getopt::EX::Numbers&lt;/a> module. Take a look at the module document for
detail.&lt;/p>
&lt;p>Next command use 1st and 5,6,7th pattern in the file.&lt;/p>
&lt;pre>&lt;code> greple -f pattern_file --select 1,5:7
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h3 id="styles">STYLES&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>-l&lt;/strong>&lt;/p>
&lt;p>List filename only.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-c&lt;/strong>, &lt;strong>&amp;ndash;count&lt;/strong>&lt;/p>
&lt;p>Print count of matched block.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-n&lt;/strong>, &lt;strong>&amp;ndash;line-number&lt;/strong>&lt;/p>
&lt;p>Show line number.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-h&lt;/strong>, &lt;strong>&amp;ndash;no-filename&lt;/strong>&lt;/p>
&lt;p>Do not display filename.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-H&lt;/strong>&lt;/p>
&lt;p>Display filename always.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-o&lt;/strong>, &lt;strong>&amp;ndash;only-matching&lt;/strong>&lt;/p>
&lt;p>Print matched string only. Newline character is printed after matched
string if it does not end with newline. Use &lt;strong>&amp;ndash;no-newline&lt;/strong> option if
you don&amp;rsquo;t need extra newline.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;all&lt;/strong>&lt;/p>
&lt;p>Print entire file. This option does not affect to seach behavior or
block treatment. Just print all contents.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-m&lt;/strong> &lt;em>n&lt;/em>[,&lt;em>m&lt;/em>], &lt;strong>&amp;ndash;max-count&lt;/strong>=&lt;em>n&lt;/em>[,&lt;em>m&lt;/em>]&lt;/p>
&lt;p>Set the maximum count of blocks to be shown to &lt;em>n&lt;/em>.&lt;/p>
&lt;p>Actually &lt;em>n&lt;/em> and &lt;em>m&lt;/em> are simply passed to perl &lt;a href="https://metacpan.org/pod/splice">splice&lt;/a> function as
&lt;em>offset&lt;/em> and &lt;em>length&lt;/em>. Works like this:&lt;/p>
&lt;pre>&lt;code> greple -m 10 # get first 10 blocks
greple -m 0,-10 # get last 10 blocks
greple -m 0,10 # remove first 10 blocks
greple -m -10 # remove last 10 blocks
greple -m 10,10 # remove 10 blocks from 10th (10-19)
&lt;/code>&lt;/pre>
&lt;p>This option does not affect to search performance and command exit
status.&lt;/p>
&lt;p>Note that &lt;strong>grep&lt;/strong> command also has same option, but it&amp;rsquo;s behavior is
different when invoked to multiple files. &lt;strong>greple&lt;/strong> produces given
number of output for each file, while &lt;strong>grep&lt;/strong> takes it as a total
number of output.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-m&lt;/strong> &lt;em>*&lt;/em>, &lt;strong>&amp;ndash;max-count&lt;/strong>=&lt;em>*&lt;/em>&lt;/p>
&lt;p>In fact, &lt;em>n&lt;/em> and &lt;em>m&lt;/em> can repeat as many as possible. Next example
removes first 10 blocks (by &lt;code>0,10&lt;/code>), then get first 10 blocks from
the result (by &lt;code>10&lt;/code>). Consequently, get 10 blocks from 10th (10-19).&lt;/p>
&lt;pre>&lt;code> greple -m 0,10,10
&lt;/code>&lt;/pre>
&lt;p>Next command get first 20 (by &lt;code>20,&lt;/code>) and get last 10 (by &lt;code>,-10&lt;/code>),
producing same result. Empty string behaves like absence for
&lt;em>length&lt;/em> and zero for &lt;em>offset&lt;/em>.&lt;/p>
&lt;pre>&lt;code> greple -m 20,,,-10
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-A&lt;/strong>[&lt;em>n&lt;/em>], &lt;strong>&amp;ndash;after-context&lt;/strong>[=&lt;em>n&lt;/em>]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-B&lt;/strong>[&lt;em>n&lt;/em>], &lt;strong>&amp;ndash;before-context&lt;/strong>[=&lt;em>n&lt;/em>]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-C&lt;/strong>[&lt;em>n&lt;/em>], &lt;strong>&amp;ndash;context&lt;/strong>[=&lt;em>n&lt;/em>]&lt;/p>
&lt;p>Print &lt;em>n&lt;/em>-blocks before/after matched string. The value &lt;em>n&lt;/em> can be
omitted and the default is 2. When used with &lt;strong>&amp;ndash;paragraph&lt;/strong> or
&lt;strong>&amp;ndash;block&lt;/strong> option, &lt;em>n&lt;/em> means number of paragraph or block.&lt;/p>
&lt;p>Actually, these options expand the area of logical operation. It
means&lt;/p>
&lt;pre>&lt;code> greple -C1 'foo bar baz'
&lt;/code>&lt;/pre>
&lt;p>matches following text.&lt;/p>
&lt;pre>&lt;code> foo
bar
baz
&lt;/code>&lt;/pre>
&lt;p>Moreover&lt;/p>
&lt;pre>&lt;code> greple -C1 'foo baz'
&lt;/code>&lt;/pre>
&lt;p>also matches this text, because matching blocks around &lt;code>foo&lt;/code> and
&lt;code>bar&lt;/code> overlaps each other and makes single block.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;join&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;joinby&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;p>Convert newline character found in matched string to empty or specified
&lt;em>string&lt;/em>. Using &lt;strong>&amp;ndash;join&lt;/strong> with &lt;strong>-o&lt;/strong> (only-matching) option, you can
collect searching sentence list in one per line form. This is
sometimes useful for Japanese text processing. For example, next
command prints the list of KATAKANA words, including those spread
across multiple lines.&lt;/p>
&lt;pre>&lt;code> greple -ho --join '\p{InKatakana}+(\n\p{InKatakana}+)*'
&lt;/code>&lt;/pre>
&lt;p>Space separated word sequence can be processed with &lt;strong>&amp;ndash;joinby&lt;/strong>
option. Next example prints all &lt;code>for *something*&lt;/code> pattern in pod
documents within Perl script.&lt;/p>
&lt;pre>&lt;code> greple -Mperl --pod -ioe '\bfor \w+' --joinby ' '
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no]newline&lt;/strong>&lt;/p>
&lt;p>Since &lt;strong>greple&lt;/strong> can handle arbitrary blocks other than normal text
lines, they sometimes do not end with newline character. Option &lt;strong>-o&lt;/strong>
makes similar situation. In that case, extra newline is appended at
the end of block to be shown. Option &lt;strong>&amp;ndash;no-newline&lt;/strong> disables this
behavior.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;filestyle&lt;/strong>=&lt;em>line&lt;/em>|&lt;em>once&lt;/em>|&lt;em>separate&lt;/em>, &lt;strong>&amp;ndash;fs&lt;/strong>&lt;/p>
&lt;p>Default style is &lt;em>line&lt;/em>, and &lt;strong>greple&lt;/strong> prints filename at the
beginning of each line. Style &lt;em>once&lt;/em> prints the filename only once
at the first time. Style &lt;em>separate&lt;/em> prints filename in the separate
line before each line or block.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;linestyle&lt;/strong>=&lt;em>line&lt;/em>|&lt;em>separate&lt;/em>, &lt;strong>&amp;ndash;ls&lt;/strong>&lt;/p>
&lt;p>Default style is &lt;em>line&lt;/em>, and &lt;strong>greple&lt;/strong> prints line numbers at the
beginning of each line. Style &lt;em>separate&lt;/em> prints line number in the
separate line before each line or block.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;separate&lt;/strong>&lt;/p>
&lt;p>Shortcut for &lt;strong>&amp;ndash;filestyle&lt;/strong>=&lt;em>separate&lt;/em> &lt;strong>&amp;ndash;linestyle&lt;/strong>=&lt;em>separate&lt;/em>.
This is convenient to use block mode search and visiting each location
from supporting tool, such as Emacs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;format&lt;/strong> &lt;strong>LABEL&lt;/strong>=&lt;em>format&lt;/em>&lt;/p>
&lt;p>Define the format string of line number (LINE) and file name (FILE) to
be displayed. Default is:&lt;/p>
&lt;pre>&lt;code> --format LINE='%d:'
--format FILE='%s:'
&lt;/code>&lt;/pre>
&lt;p>Format string is passed to &lt;code>sprintf&lt;/code> function. Tab character can be
expressed as &lt;code>\t&lt;/code>.&lt;/p>
&lt;p>Next example will show line numbers in five digits with tab space:&lt;/p>
&lt;pre>&lt;code> --format LINE='%05d\t'
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;frame-top&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;frame-middle&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;frame-bottom&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;p>Print surrounding frames before and after each block. &lt;code>top&lt;/code> frame is
printed at the beginning, &lt;code>bottom&lt;/code> frame at the end, &lt;code>middle&lt;/code> frame
between blocks.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="files">FILES&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;glob&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Get files matches to specified pattern and use them as a target files.
Using &lt;strong>&amp;ndash;chdir&lt;/strong> and &lt;strong>&amp;ndash;glob&lt;/strong> makes easy to use &lt;strong>greple&lt;/strong> for fixed
common job.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;chdir&lt;/strong>=&lt;em>directory&lt;/em>&lt;/p>
&lt;p>Change directory before processing files. When multiple directories
are specified in &lt;strong>&amp;ndash;chdir&lt;/strong> option, by using wildcard form or
repeating option, &lt;strong>&amp;ndash;glob&lt;/strong> file expansion will be done for every
directories.&lt;/p>
&lt;pre>&lt;code> greple --chdir '/usr/man/man?' --glob '*.[0-9]' ...
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;readlist&lt;/strong>&lt;/p>
&lt;p>Get filenames from standard input. Read standard input and use each
line as a filename for searching. You can feed the output from other
command like &lt;a href="http://man.he.net/man1/find">find(1)&lt;/a> for &lt;strong>greple&lt;/strong> with this option. Next example
searches string from files modified within 7 days:&lt;/p>
&lt;pre>&lt;code> find . -mtime -7 -print | greple --readlist pattern
&lt;/code>&lt;/pre>
&lt;p>Using &lt;strong>find&lt;/strong> module, this can be done like:&lt;/p>
&lt;pre>&lt;code> greple -Mfind . -mtime -7 -- pattern
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h3 id="colors">COLORS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;color&lt;/strong>=[&lt;code>auto&lt;/code>,&lt;code>always&lt;/code>,&lt;code>never&lt;/code>], &lt;strong>&amp;ndash;nocolor&lt;/strong>&lt;/p>
&lt;p>Use terminal color capability to emphasize the matched text. Default
is &lt;code>auto&lt;/code>: effective when STDOUT is a terminal and option &lt;strong>-o&lt;/strong> is
not given, not otherwise. Option value &lt;code>always&lt;/code> and &lt;code>never&lt;/code> will
work as expected.&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;nocolor&lt;/strong> is alias for &lt;strong>&amp;ndash;color&lt;/strong>=&lt;em>never&lt;/em>.&lt;/p>
&lt;p>When color output is disabled, ANSI terminal sequence is not produced,
but functional colormap, such as &lt;code>--cm sub{...}&lt;/code>, still works.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;colormap&lt;/strong>=&lt;em>spec&lt;/em>&lt;/p>
&lt;p>Specify color map. Because this option is mostly implemented by
&lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3AColormap">Getopt::EX::Colormap&lt;/a> module, consult its document for detail and
up-to-date specification.&lt;/p>
&lt;p>Color specification is combination of single uppercase character
representing basic colors, and (usually brighter) alternative colors in
lowercase:&lt;/p>
&lt;pre>&lt;code> R r Red
G g Green
B b Blue
C c Cyan
M m Magenta
Y y Yellow
K k Black
W w White
&lt;/code>&lt;/pre>
&lt;p>or RGB value and 24 grey levels if using ANSI 256 color terminal:&lt;/p>
&lt;pre>&lt;code> (255,255,255) : 24bit decimal RGB colors
#000000 .. #FFFFFF : 24bit hex RGB colors
#000 .. #FFF : 12bit hex RGB 4096 colors
000 .. 555 : 6x6x6 RGB 216 colors
L00 .. L25 : Black (L00), 24 grey levels, White (L25)
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;pre>&lt;code>Beginning # can be omitted in 24bit RGB notation.
When values are all same in 24bit or 12bit RGB, it is converted to 24
grey level, otherwise 6x6x6 216 color.
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;p>or color names enclosed by angle bracket:&lt;/p>
&lt;pre>&lt;code> &amp;lt;red&amp;gt; &amp;lt;blue&amp;gt; &amp;lt;green&amp;gt; &amp;lt;cyan&amp;gt; &amp;lt;magenta&amp;gt; &amp;lt;yellow&amp;gt;
&amp;lt;aliceblue&amp;gt; &amp;lt;honeydue&amp;gt; &amp;lt;hotpink&amp;gt; &amp;lt;mooccasin&amp;gt;
&amp;lt;medium_aqua_marine&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>with other special effects:&lt;/p>
&lt;pre>&lt;code> N None
Z 0 Zero (reset)
D 1 Double strike (boldface)
P 2 Pale (dark)
I 3 Italic
U 4 Underline
F 5 Flash (blink: slow)
Q 6 Quick (blink: rapid)
S 7 Stand out (reverse video)
H 8 Hide (concealed)
X 9 Cross out
E Erase Line
; No effect
/ Toggle foreground/background
^ Reset to foreground
&lt;/code>&lt;/pre>
&lt;p>If the spec includes &lt;code>/&lt;/code>, left side is considered as foreground color
and right side as background. If multiple colors are given in same
spec, all indicators are produced in the order of their presence. As
a result, the last one takes effect.&lt;/p>
&lt;p>Effect characters are case insensitive, and can be found anywhere and
in any order in color spec string. Character &lt;code>;&lt;/code> does nothing and
can be used just for readability, like &lt;code>SD;K/544&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre>&lt;code> RGB 6x6x6 12bit 24bit color name
=== ======= ========= ============= ==================
B 005 #00F (0,0,255) &amp;lt;blue&amp;gt;
/M /505 /#F0F /(255,0,255) /&amp;lt;magenta&amp;gt;
K/W 000/555 #000/#FFF 000000/FFFFFF &amp;lt;black&amp;gt;/&amp;lt;white&amp;gt;
R/G 500/050 #F00/#0F0 FF0000/00FF00 &amp;lt;red&amp;gt;/&amp;lt;green&amp;gt;
W/w L03/L20 #333/#ccc 303030/c6c6c6 &amp;lt;dimgrey&amp;gt;/&amp;lt;lightgrey&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Multiple colors can be specified separating by white space or comma,
or by repeating options. Those colors will be applied for each
pattern keywords. Next command will show word &lt;code>foo&lt;/code> in red, &lt;code>bar&lt;/code>
in green and &lt;code>baz&lt;/code> in blue.&lt;/p>
&lt;pre>&lt;code> greple --colormap='R G B' 'foo bar baz'
greple --cm R -e foo --cm G -e bar --cm B -e baz
&lt;/code>&lt;/pre>
&lt;p>Coloring capability is implemented in &lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3AColormap">Getopt::EX::Colormap&lt;/a> module.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;colormap&lt;/strong>=&lt;em>field&lt;/em>=&lt;em>spec&lt;/em>,&amp;hellip;&lt;/p>
&lt;p>Another form of colormap option to specify the color for fields:&lt;/p>
&lt;pre>&lt;code> FILE File name
LINE Line number
TEXT Unmatched normal text
BLOCKEND Block end mark
PROGRESS Progress status with -dnf option
&lt;/code>&lt;/pre>
&lt;p>In current release, &lt;code>BLOCKEND&lt;/code> mark is colored with &lt;code>E&lt;/code> effect
recently implemented in &lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX">Getopt::EX&lt;/a> module, which allows to fill up
the line with background color. This effect uses irregular escape
sequence, and you may need to define &lt;code>LESSANSIENDCHARS&lt;/code> environment
as &amp;ldquo;mK&amp;rdquo; to see the result with &lt;a href="https://metacpan.org/pod/less">less&lt;/a> command.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;colormap&lt;/strong>=&lt;code>&amp;amp;func&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;colormap&lt;/strong>=&lt;code>sub{...}&lt;/code>&lt;/p>
&lt;p>You can also set the name of perl subroutine name or definition to be
called handling matched words. Target word is passed as variable
&lt;code>$_&lt;/code>, and the return value of the subroutine will be displayed.&lt;/p>
&lt;p>Next command convert all words in C comment to upper case.&lt;/p>
&lt;pre>&lt;code> greple --all '/\*(?s:.*?)\*/' --cm 'sub{uc}'
&lt;/code>&lt;/pre>
&lt;p>You can quote matched string instead of coloring (this emulates
deprecated option &lt;strong>&amp;ndash;quote&lt;/strong>):&lt;/p>
&lt;pre>&lt;code> greple --cm 'sub{&amp;quot;&amp;lt;&amp;quot;.$_.&amp;quot;&amp;gt;&amp;quot;}' ...
&lt;/code>&lt;/pre>
&lt;p>It is possible to use this definition with field names. Next example
print line numbers in seven digits.&lt;/p>
&lt;pre>&lt;code> greple -n --cm 'LINE=sub{s/(\d+)/sprintf(&amp;quot;%07d&amp;quot;,$1)/e;$_}'
&lt;/code>&lt;/pre>
&lt;p>Experimentally, function can be combined with other normal color
specifications. Also the form &lt;code>&amp;amp;func;&lt;/code> can be repeated.&lt;/p>
&lt;pre>&lt;code> greple --cm 'BF/544;sub{uc}'
greple --cm 'R;&amp;amp;func1;&amp;amp;func2;&amp;amp;func3'
&lt;/code>&lt;/pre>
&lt;p>When color for &amp;lsquo;TEXT&amp;rsquo; field is specified, whole text including matched
part is passed to the function, exceptionally. It is not recommended
to use user defined function for &amp;lsquo;TEXT&amp;rsquo; field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no]colorful&lt;/strong>&lt;/p>
&lt;p>Shortcut for &lt;strong>&amp;ndash;colormap&lt;/strong>=&amp;rsquo;&lt;code>RD GD BD CD MD YD&lt;/code>&amp;rsquo; in ANSI 16 colors
mode, and &lt;strong>&amp;ndash;colormap&lt;/strong>=&amp;rsquo;&lt;code>D/544 D/454 D/445 D/455 D/454 D/554&lt;/code>&amp;rsquo; and
other combination of 3, 4, 5 for 256 colors mode. Enabled by default.&lt;/p>
&lt;p>When single pattern is specified, first color in colormap is used for
the pattern. If multiple patterns and multiple colors are specified,
each pattern is colored with corresponding color cyclically.&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;regioncolor&lt;/strong>, &lt;strong>&amp;ndash;uniqcolor&lt;/strong> and &lt;strong>&amp;ndash;colorindex&lt;/strong> change
this behavior.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;colorindex&lt;/strong>=&lt;em>spec&lt;/em>, &lt;strong>&amp;ndash;ci&lt;/strong>=&lt;em>spec&lt;/em>&lt;/p>
&lt;p>Specify color index method by combination of spec characters. &lt;strong>A&lt;/strong>
(ascend) and &lt;strong>D&lt;/strong> (descend) can be mixed with &lt;strong>B&lt;/strong> (block) and/or &lt;strong>S&lt;/strong>
(shuffle) like &lt;strong>&amp;ndash;ci=ABS&lt;/strong>. &lt;strong>R&lt;/strong> (random) can be too but it does not
make sense. When &lt;strong>S&lt;/strong> is used alone, colormap is shuffled with normal
behavior.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A (Ascending)&lt;/p>
&lt;p>Apply different color sequentially according to the order of
appearance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>D (Descending)&lt;/p>
&lt;p>Apply different color sequentially according to the reverse order of
appearance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B (Block)&lt;/p>
&lt;p>Reset sequential index on every block.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>S (Shuffle)&lt;/p>
&lt;p>Shuffle indexed color.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>R (Random)&lt;/p>
&lt;p>Use random color index every time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>N (Normal)&lt;/p>
&lt;p>Reset to normal behavior. Because the last option takes effect,
&lt;strong>&amp;ndash;ci=N&lt;/strong> can be used to reset the behavior set by previous options.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;random&lt;/strong>&lt;/p>
&lt;p>Shortcut for &lt;strong>&amp;ndash;colorindex=R&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;ansicolor&lt;/strong>=[&lt;code>16&lt;/code>,&lt;code>256&lt;/code>,&lt;code>24bit&lt;/code>]&lt;/p>
&lt;p>If set as &lt;code>16&lt;/code>, use ANSI 16 colors as a default color set, otherwise
ANSI 256 colors. When set as &lt;code>24bit&lt;/code>, 6 hex digits notation produces
24bit color sequence. Default is &lt;code>256&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no]256&lt;/strong>&lt;/p>
&lt;p>Shortcut for &lt;strong>&amp;ndash;ansicolor&lt;/strong>=&lt;code>256&lt;/code> or &lt;code>16&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no]regioncolor&lt;/strong>, &lt;strong>&amp;ndash;[no]rc&lt;/strong>&lt;/p>
&lt;p>Use different colors for each &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong> region.&lt;/p>
&lt;p>Disabled by default, but automatically enabled when only single search
pattern is specified. Use &lt;strong>&amp;ndash;no-regioncolor&lt;/strong> to cancel automatic
action.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no]uniqcolor&lt;/strong>, &lt;strong>&amp;ndash;[no]uc&lt;/strong>&lt;/p>
&lt;p>Use different colors for different string matched.
Disabled by default.&lt;/p>
&lt;p>Next example prints all words start by &lt;code>color&lt;/code> and display them all
in different colors.&lt;/p>
&lt;pre>&lt;code> greple --uniqcolor 'colou?r\w*'
&lt;/code>&lt;/pre>
&lt;p>When used with option &lt;strong>-i&lt;/strong>, color is selected still in case-sensitive
fashion. If you want case-insensitive color selection, use next
&lt;strong>&amp;ndash;uniqsub&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;uniqsub&lt;/strong>=&lt;em>function&lt;/em>, &lt;strong>&amp;ndash;us&lt;/strong>=&lt;em>function&lt;/em>&lt;/p>
&lt;p>Above option &lt;strong>&amp;ndash;uniqcolor&lt;/strong> set same color for same literal string.
Option &lt;strong>&amp;ndash;uniqsub&lt;/strong> specify the preprocessor code applied before
comparison. &lt;em>function&lt;/em> get matched string by &lt;code>$_&lt;/code> and returns the
result. For example, next command will choose unique colors for each
word by their length.&lt;/p>
&lt;pre>&lt;code> greple --uniqcolor --uniqsub 'sub{length}' '\w+' file
&lt;/code>&lt;/pre>
&lt;p>If you want case-insensitive color selection, do like this.&lt;/p>
&lt;pre>&lt;code> greple -i pattern --uc --uniqsub 'sub{lc}'
&lt;/code>&lt;/pre>
&lt;p>Next command read the output from &lt;code>git blame&lt;/code> command and set unique
color for each entire line by their commit ids.&lt;/p>
&lt;pre>&lt;code> git blame ... | greple .+ --uc --us='sub{s/\s.*//r}' --face=E-D
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;face&lt;/strong>=[-+]&lt;em>effect&lt;/em>&lt;/p>
&lt;p>Set or unset specified &lt;em>effect&lt;/em> for all indexed color specs. Use
&lt;code>+&lt;/code> (optional) to set, and &lt;code>-&lt;/code> to unset. Effect is a single
character expressing S (Stand-out), U (Underline), D (Double-struck),
F (Flash) and such.&lt;/p>
&lt;p>Next example remove D (double-struck) effect.&lt;/p>
&lt;pre>&lt;code> greple --face -D
&lt;/code>&lt;/pre>
&lt;p>Multiple effects can be set/unset at once.&lt;/p>
&lt;pre>&lt;code> greple --face SF-D
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h3 id="blocks">BLOCKS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>-p&lt;/strong>, &lt;strong>&amp;ndash;paragraph&lt;/strong>&lt;/p>
&lt;p>Print a paragraph which contains the pattern. Each paragraph is
delimited by two or more successive newlines by default. Be aware
that an empty line is not a paragraph delimiter if which contains
space characters. Example:&lt;/p>
&lt;pre>&lt;code> greple -np 'setuid script' /usr/man/catl/perl.l
greple -pe '^struct sockaddr' /usr/include/sys/socket.h
&lt;/code>&lt;/pre>
&lt;p>It changes the unit of context specified by &lt;strong>-A&lt;/strong>, &lt;strong>-B&lt;/strong>, &lt;strong>-C&lt;/strong>
options. Space gap between paragraphs are also treated as block
unit. Thus, option &lt;strong>-pC2&lt;/strong> will print with previous and next
paragraph, while &lt;strong>-pC1&lt;/strong> will print with just surrounding spaces.&lt;/p>
&lt;p>You can create original paragraph pattern by &lt;strong>&amp;ndash;border&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;border&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify record block border pattern. Pattern match is done in the
context of multiple line mode.&lt;/p>
&lt;p>Default block is a single line and use &lt;code>/^/m&lt;/code> as a pattern.
Paragraph mode uses &lt;code>/(?:\A|\R)\K\R+/&lt;/code>, which means continuous
newlines at the beginning of text or following another newline (&lt;code>\R&lt;/code>
means more general linebreaks including &lt;code>\r\n&lt;/code>; consult
&lt;a href="https://metacpan.org/pod/perlrebackslash">perlrebackslash&lt;/a> for detail).&lt;/p>
&lt;p>Next command treat the data as a series of 10-line unit.&lt;/p>
&lt;pre>&lt;code> greple -n --border='(.*\n){1,10}'
&lt;/code>&lt;/pre>
&lt;p>Contrary to the next &lt;strong>&amp;ndash;block&lt;/strong> option, &lt;strong>&amp;ndash;border&lt;/strong> never produce
disjoint records.&lt;/p>
&lt;p>If you want to treat entire file as a single block, setting border to
start or end of whole data is efficient way. Next commands works
same.&lt;/p>
&lt;pre>&lt;code> greple --border '\A' # beginning of file
greple --border '\z' # end of file
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;block&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;block&lt;/strong>=&lt;em>&amp;amp;sub&lt;/em>&lt;/p>
&lt;p>Specify the record block to display. Default block is a single line.&lt;/p>
&lt;p>Empty blocks are ignored. When blocks are not continuous, the match
occurred outside blocks are ignored.&lt;/p>
&lt;p>If multiple block options are given, overlapping blocks are merged
into a single block.&lt;/p>
&lt;p>Please be aware that this option is sometimes quite time consuming,
because it finds all blocks before processing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;blockend&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;p>Change the end mark displayed after &lt;strong>-pABC&lt;/strong> or &lt;strong>&amp;ndash;block&lt;/strong> options.
Default value is &amp;ldquo;&amp;ndash;&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;join-blocks&lt;/strong>&lt;/p>
&lt;p>Join consecutive blocks together. Logical operation is done for each
individual blocks, but if the results are back-to-back connected, make
them single block for final output.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="regions">REGIONS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;inside&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;outside&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;inside&lt;/strong> and &lt;strong>&amp;ndash;outside&lt;/strong> limit the text area to be matched.
For simple example, if you want to find string &lt;code>and&lt;/code> not in the word
&lt;code>command&lt;/code>, it can be done like this.&lt;/p>
&lt;pre>&lt;code> greple --outside=command and
&lt;/code>&lt;/pre>
&lt;p>The block can be larger and expand to multiple lines. Next command
searches from C source, excluding comment part.&lt;/p>
&lt;pre>&lt;code> greple --outside '(?s)/\*.*?\*/'
&lt;/code>&lt;/pre>
&lt;p>Next command searches only from POD part of the perl script.&lt;/p>
&lt;pre>&lt;code> greple --inside='(?s)^=.*?(^=cut|\Z)'
&lt;/code>&lt;/pre>
&lt;p>When multiple &lt;strong>inside&lt;/strong> and &lt;strong>outside&lt;/strong> regions are specified, those
regions are mixed up in union way.&lt;/p>
&lt;p>In multiple color environment, and if single keyword is specified,
matches in each &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong> region is printed in different
color. Forcing this operation with multiple keywords, use
&lt;strong>&amp;ndash;regioncolor&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;inside&lt;/strong>=&lt;em>&amp;amp;function&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;outside&lt;/strong>=&lt;em>&amp;amp;function&lt;/em>&lt;/p>
&lt;p>If the pattern name begins by ampersand (&amp;amp;) character, it is treated
as a name of subroutine which returns a list of blocks. Using this
option, user can use arbitrary function to determine from what part of
the text they want to search. User defined function can be defined in
&lt;code>.greplerc&lt;/code> file or by module option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;include&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exclude&lt;/strong>=&lt;em>pattern&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;include&lt;/strong>=&lt;em>&amp;amp;function&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exclude&lt;/strong>=&lt;em>&amp;amp;function&lt;/em>&lt;/p>
&lt;p>&lt;strong>&amp;ndash;include&lt;/strong>/&lt;strong>exclude&lt;/strong> option behave exactly same as
&lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong> when used alone.&lt;/p>
&lt;p>When used in combination, &lt;strong>&amp;ndash;include&lt;/strong>/&lt;strong>exclude&lt;/strong> are mixed in AND
manner, while &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong> are in OR.&lt;/p>
&lt;p>Thus, in the next example, first line prints all matches, and second
does none.&lt;/p>
&lt;pre>&lt;code> greple --inside PATTERN --outside PATTERN
greple --include PATTERN --exclude PATTERN
&lt;/code>&lt;/pre>
&lt;p>You can make up desired matches using &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong> option,
then remove unnecessary part by &lt;strong>&amp;ndash;include&lt;/strong>/&lt;strong>exclude&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;strict&lt;/strong>&lt;/p>
&lt;p>Limit the match area strictly.&lt;/p>
&lt;p>By default, &lt;strong>&amp;ndash;block&lt;/strong>, &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong>,
&lt;strong>&amp;ndash;include&lt;/strong>/&lt;strong>exclude&lt;/strong> option allows partial match within the
specified area. For instance,&lt;/p>
&lt;pre>&lt;code> greple --inside and command
&lt;/code>&lt;/pre>
&lt;p>matches pattern &lt;code>command&lt;/code> because the part of matched string is
included in specified inside-area. Partial match fails when option
&lt;strong>&amp;ndash;strict&lt;/strong> provided, and longer string never matches within shorter
area.&lt;/p>
&lt;p>Interestingly enough, above example&lt;/p>
&lt;pre>&lt;code> greple --include PATTERN --exclude PATTERN
&lt;/code>&lt;/pre>
&lt;p>produces output, as a matter of fact. Think of the situation
searching, say, &lt;code>' PATTERN '&lt;/code> with this condition. Matched area
includes surrounding spaces, and satisfies both conditions partially.
This match does not occur when option &lt;strong>&amp;ndash;strict&lt;/strong> is given, either.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="character-code">CHARACTER CODE&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;icode&lt;/strong>=&lt;em>code&lt;/em>&lt;/p>
&lt;p>Target file is assumed to be encoded in utf8 by default. Use this
option to set specific encoding. When handling Japanese text, you may
choose from 7bit-jis (jis), euc-jp or shiftjis (sjis). Multiple code
can be supplied using multiple option or combined code names with
space or comma, then file encoding is guessed from those code sets.
Use encoding name &lt;code>guess&lt;/code> for automatic recognition from default code
list which is euc-jp and 7bit-jis. Following commands are all
equivalent.&lt;/p>
&lt;pre>&lt;code> greple --icode=guess ...
greple --icode=euc-jp,7bit-jis ...
greple --icode=euc-jp --icode=7bit-jis ...
&lt;/code>&lt;/pre>
&lt;p>Default code set are always included suspect code list. If you have
just one code adding to suspect list, put + mark before the code name.
Next example does automatic code detection from euc-kr, ascii, utf8
and UTF-16/32.&lt;/p>
&lt;pre>&lt;code> greple --icode=+euc-kr ...
&lt;/code>&lt;/pre>
&lt;p>If the string &amp;ldquo;&lt;strong>binary&lt;/strong>&amp;rdquo; is given as encoding name, no character
encoding is expected and all files are processed as binary data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;ocode&lt;/strong>=&lt;em>code&lt;/em>&lt;/p>
&lt;p>Specify output code. Default is utf8.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="filter">FILTER&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;if&lt;/strong>=&lt;em>filter&lt;/em>, &lt;strong>&amp;ndash;if&lt;/strong>=&lt;em>EXP&lt;/em>:&lt;em>filter&lt;/em>&lt;/p>
&lt;p>You can specify filter command which is applied to each file before
search. If only one filter command is specified, it is applied to all
files. If filter information include colon, first field will be perl
expression to check the filename saved in variable $_. If it
successes, next filter command is pushed.&lt;/p>
&lt;pre>&lt;code> greple --if=rev perg
greple --if='/\.tar$/:tar tvf -'
&lt;/code>&lt;/pre>
&lt;p>If the command doesn&amp;rsquo;t accept standard input as processing data, you
may be able to use special device:&lt;/p>
&lt;pre>&lt;code> greple --if='nm /dev/stdin' crypt /usr/lib/lib*
&lt;/code>&lt;/pre>
&lt;p>Filters for compressed and gzipped file is set by default unless
&lt;strong>&amp;ndash;noif&lt;/strong> option is given. Default action is like this:&lt;/p>
&lt;pre>&lt;code> greple --if='s/\.Z$//:zcat' --if='s/\.g?z$//:gunzip -c'
&lt;/code>&lt;/pre>
&lt;p>File with &lt;code>.gpg&lt;/code> suffix is filtered by &lt;strong>gpg&lt;/strong> command. In that case,
pass-phrase is asked for each file. If you want to input pass-phrase
only once to find from multiple files, use &lt;strong>-Mpgp&lt;/strong> module.&lt;/p>
&lt;p>If the filter start with &lt;code>&amp;amp;&lt;/code>, perl subroutine is called instead of
external command. You can define the subroutine in &lt;code>.greplerc&lt;/code> or
modules. &lt;strong>Greple&lt;/strong> simply call the subroutine, so it should be
responsible for process control.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;noif&lt;/strong>&lt;/p>
&lt;p>Disable default input filter. Which means compressed files will not
be decompressed automatically.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;of&lt;/strong>=&lt;em>filter&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;of&lt;/strong>=&lt;em>&amp;amp;func&lt;/em>&lt;/p>
&lt;p>Specify output filter which process the output of &lt;strong>greple&lt;/strong> command.
Filter command can be specified in multiple times, and they are
invoked for each file to be processed. So next command reset the line
number for each file.&lt;/p>
&lt;pre>&lt;code> greple --of 'cat -n' string file1 file2 ...
&lt;/code>&lt;/pre>
&lt;p>If the filter start with &lt;code>&amp;amp;&lt;/code>, perl subroutine is called instead of
external command. You can define the subroutine in &lt;code>.greplerc&lt;/code> or
modules.&lt;/p>
&lt;p>Output filter command is executed only when matched string exists to
avoid invoking many unnecessary processes. No effect for option
&lt;strong>-l&lt;/strong> and &lt;strong>-c&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;pf&lt;/strong>=&lt;em>filter&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;pf&lt;/strong>=&lt;em>&amp;amp;func&lt;/em>&lt;/p>
&lt;p>Similar to &lt;strong>&amp;ndash;of&lt;/strong> filter but invoked just once and takes care of
entire output from &lt;strong>greple&lt;/strong> command.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="runtime-functions">RUNTIME FUNCTIONS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;print&lt;/strong>=&lt;em>function&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;print&lt;/strong>=&lt;em>sub{&amp;hellip;}&lt;/em>&lt;/p>
&lt;p>Specify user defined function executed before data print. Text to be
printed is replaced by the result of the function. Arbitrary function
can be defined in &lt;code>.greplerc&lt;/code> file or module. Matched data is placed
in variable &lt;code>$_&lt;/code>. Filename is passed by &lt;code>&amp;amp;FILELABEL&lt;/code> key, as
described later.&lt;/p>
&lt;p>It is possible to use multiple &lt;strong>&amp;ndash;print&lt;/strong> options. In that case,
second function will get the result of the first function. The
command will print the final result of the last function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;continue&lt;/strong>&lt;/p>
&lt;p>When &lt;strong>&amp;ndash;print&lt;/strong> option is given, &lt;strong>greple&lt;/strong> will immediately print the
result returned from print function and finish the cycle. Option
&lt;strong>&amp;ndash;continue&lt;/strong> forces to continue normal printing process after print
function called. So please be sure that all data being consistent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;callback&lt;/strong>=&lt;em>function&lt;/em>(&lt;em>&amp;hellip;&lt;/em>)&lt;/p>
&lt;p>Callback function is called before printing every matched pattern with
four labeled parameters: &lt;strong>start&lt;/strong>, &lt;strong>end&lt;/strong>, &lt;strong>index&lt;/strong> and &lt;strong>match&lt;/strong>,
which corresponds to start and end position in the text, pattern
index, and the matched string. Matched string in the text is replaced
by returned string from the function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;begin&lt;/strong>=&lt;em>function&lt;/em>(&lt;em>&amp;hellip;&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;begin&lt;/strong>=&lt;em>function&lt;/em>=&lt;em>&amp;hellip;&lt;/em>&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;begin&lt;/strong> specify the function executed at the beginning of
each file processing. This &lt;em>function&lt;/em> have to be called from &lt;strong>main&lt;/strong>
package. So if you define the function in the module package, use the
full package name or export properly.&lt;/p>
&lt;p>If the function dies with a message starting with a word &amp;ldquo;SKIP&amp;rdquo;
(&lt;code>/^SKIP/i&lt;/code>), that file is simply skipped. So you can control if the
file is to be processed using the file name or content. To see the
message, use &lt;strong>&amp;ndash;warn begin=1&lt;/strong> option.&lt;/p>
&lt;p>For example, using next function, only perl related files will be
processed.&lt;/p>
&lt;pre>&lt;code> sub is_perl {
my %arg = @_;
my $name = delete $arg{&amp;amp;FILELABEL} or die;
$name =~ /\.(?:pm|pl|PL|pod)$/ or /\A#!.*\bperl/
or die &amp;quot;skip $name\n&amp;quot;;
}
1;
__DATA__
option default --filestyle=once --format FILE='\n%s:\n'
autoload -Mdig --dig
option --perl $&amp;lt;move&amp;gt; --begin &amp;amp;__PACKAGE__::is_perl --dig .
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;end&lt;/strong>=&lt;em>function&lt;/em>(&lt;em>&amp;hellip;&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;end&lt;/strong>=&lt;em>function&lt;/em>=&lt;em>&amp;hellip;&lt;/em>&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;end&lt;/strong> is almost same as &lt;strong>&amp;ndash;begin&lt;/strong>, except that the function
is called after the file processing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;prologue&lt;/strong>=&lt;em>function&lt;/em>(&lt;em>&amp;hellip;&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;prologue&lt;/strong>=&lt;em>function&lt;/em>=&lt;em>&amp;hellip;&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;epilogue&lt;/strong>=&lt;em>function&lt;/em>(&lt;em>&amp;hellip;&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;epilogue&lt;/strong>=&lt;em>function&lt;/em>=&lt;em>&amp;hellip;&lt;/em>&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;prologue&lt;/strong> and &lt;strong>&amp;ndash;epilogue&lt;/strong> specify functions called before
and after processing. During the execution, file is not opened and
therefore, file name is not given to those functions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-M&lt;/strong>&lt;em>module&lt;/em>::&lt;em>function(&amp;hellip;)&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-M&lt;/strong>&lt;em>module&lt;/em>::&lt;em>function=&amp;hellip;&lt;/em>&lt;/p>
&lt;p>Function can be given with module option, following module name. In
this form, the function will be called with module package name. So
you don&amp;rsquo;t have to export it. Because it is called only once at the
beginning of command execution, before starting file processing,
&lt;code>FILELABEL&lt;/code> parameter is not given exceptionally.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>For these run-time functions, optional argument list can be set in the
form of &lt;code>key&lt;/code> or &lt;code>key=value&lt;/code>, connected by comma. These arguments
will be passed to the function in key =&amp;gt; value list. Sole key will
have the value one. Also processing file name is passed with the key
of &lt;code>FILELABEL&lt;/code> constant. As a result, the option in the next form:&lt;/p>
&lt;pre>&lt;code>--begin function(key1,key2=val2)
--begin function=key1,key2=val2
&lt;/code>&lt;/pre>
&lt;p>will be transformed into following function call:&lt;/p>
&lt;pre>&lt;code>function(&amp;amp;FILELABEL =&amp;gt; &amp;quot;filename&amp;quot;, key1 =&amp;gt; 1, key2 =&amp;gt; &amp;quot;val2&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>As described earlier, &lt;code>FILELABEL&lt;/code> parameter is not given to the
function specified with module option. So&lt;/p>
&lt;pre>&lt;code>-Mmodule::function(key1,key2=val2)
-Mmodule::function=key1,key2=val2
&lt;/code>&lt;/pre>
&lt;p>simply becomes:&lt;/p>
&lt;pre>&lt;code>function(key1 =&amp;gt; 1, key2 =&amp;gt; &amp;quot;val2&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>The function can be defined in &lt;code>.greplerc&lt;/code> or modules. Assign the
arguments into hash, then you can access argument list as member of
the hash. It&amp;rsquo;s safe to delete FILELABEL key if you expect random
parameter is given. Content of the target file can be accessed by
&lt;code>$_&lt;/code>. Ampersand (&lt;code>&amp;amp;&lt;/code>) is required to avoid the hash key is
interpreted as a bare word.&lt;/p>
&lt;pre>&lt;code>sub function {
my %arg = @_;
my $filename = delete $arg{&amp;amp;FILELABEL};
$arg{key1}; # 1
$arg{key2}; # &amp;quot;val2&amp;quot;
$_; # contents
}
&lt;/code>&lt;/pre>
&lt;h3 id="others">OTHERS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;usage&lt;/strong>[=&lt;em>expand&lt;/em>]&lt;/p>
&lt;p>&lt;strong>Greple&lt;/strong> print usage and exit with option &lt;strong>&amp;ndash;usage&lt;/strong>, or no valid
parameter is not specified. In this case, module option is displayed
with help information if available. If you want to see how they are
expanded, supply something not empty to &lt;strong>&amp;ndash;usage&lt;/strong> option, like:&lt;/p>
&lt;pre>&lt;code> greple -Mmodule --usage=expand
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exit&lt;/strong>=&lt;em>number&lt;/em>&lt;/p>
&lt;p>When &lt;strong>greple&lt;/strong> executed normally, it exit with status 0 or 1 depending
on something matched or not. Sometimes we want to get status 0 even
if nothing matched. This option set the status code for normal
execution. It still exits with non-zero status when error occurred.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;man&lt;/strong>, &lt;strong>&amp;ndash;doc&lt;/strong>&lt;/p>
&lt;p>Show manual page.
Display module&amp;rsquo;s manual page when used with &lt;strong>-M&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;show&lt;/strong>, &lt;strong>&amp;ndash;less&lt;/strong>&lt;/p>
&lt;p>Show module file contents. Use with &lt;strong>-M&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;path&lt;/strong>&lt;/p>
&lt;p>Show module file path. Use with &lt;strong>-M&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;norc&lt;/strong>&lt;/p>
&lt;p>Do not read startup file: &lt;code>~/.greplerc&lt;/code>. This option have to be
placed before any other options including &lt;strong>-M&lt;/strong> module options.
Setting &lt;code>GREPLE_NORC&lt;/code> environment have same effect.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;conceal&lt;/strong> &lt;em>type&lt;/em>=&lt;em>val&lt;/em>&lt;/p>
&lt;p>Use following &lt;strong>&amp;ndash;warn&lt;/strong> option in reverse context. This option
remains for backward compatibility and will be deprecated in the near
future.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;persist&lt;/strong>&lt;/p>
&lt;p>Same as &lt;strong>&amp;ndash;error=retry&lt;/strong>. It may be deprecated in the future.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;error&lt;/strong>=&lt;em>action&lt;/em>&lt;/p>
&lt;p>As &lt;strong>greple&lt;/strong> tries to read data as a character string, sometimes fails
to convert them into internal representation, and the file is skipped
without processing by default. This works fine to skip binary
data. (&lt;strong>skip&lt;/strong>)&lt;/p>
&lt;p>Also sometimes encounters code mapping error due to character
encoding. In this case, reading the file as a binary data helps to
produce meaningful output. (&lt;strong>retry&lt;/strong>)&lt;/p>
&lt;p>This option specifies the action when data read error occurred.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>skip&lt;/strong>&lt;/p>
&lt;p>Skip the file. Default.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>retry&lt;/strong>&lt;/p>
&lt;p>Retry reading the file as a binary data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fatal&lt;/strong>&lt;/p>
&lt;p>Abort the operation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ignore&lt;/strong>&lt;/p>
&lt;p>Ignore error and continue to read anyway.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You may occasionally want to find text in binary data. Next command
will work like &lt;a href="http://man.he.net/man1/string">string(1)&lt;/a> command.&lt;/p>
&lt;pre>&lt;code> greple -o --re '(?a)\w{4,}' --error=retry --uc /bin/*
&lt;/code>&lt;/pre>
&lt;p>If you want read all files as binary data, use &lt;strong>&amp;ndash;icode=binary&lt;/strong>
instead.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-w&lt;/strong>, &lt;strong>&amp;ndash;warn&lt;/strong> &lt;em>type&lt;/em>=[&lt;code>0&lt;/code>,&lt;code>1&lt;/code>]&lt;/p>
&lt;p>Control runtime message mainly about file operation related to
&lt;strong>&amp;ndash;error&lt;/strong> option. Repeatable. Value is optional and 1 is assumed
when omitted. So &lt;strong>-wall&lt;/strong> option is same as &lt;strong>-wall=1&lt;/strong> and enables
all messages, and &lt;strong>-wall=0&lt;/strong> disables all.&lt;/p>
&lt;p>Types are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>read&lt;/strong>&lt;/p>
&lt;p>(Default 0) Errors occurred during file read. Mainly unicode related
errors when reading binary or ambiguous text file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>skip&lt;/strong>&lt;/p>
&lt;p>(Default 1) File skip message.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>retry&lt;/strong>&lt;/p>
&lt;p>(Default 0) File retry message.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>begin&lt;/strong>&lt;/p>
&lt;p>(Default 0) When &lt;strong>&amp;ndash;begin&lt;/strong> function died with &lt;code>/^SKIP/i&lt;/code> message,
the file is skipped without any notice. Enables this to see the dying
message.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>all&lt;/strong>&lt;/p>
&lt;p>Set same value for all types.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;alert&lt;/strong> [ &lt;em>size&lt;/em>=# | &lt;em>time&lt;/em>=# ]&lt;/p>
&lt;p>Set alert parameter for large file. &lt;strong>Greple&lt;/strong> scans whole file
content to know line borders, and it takes several seconds or more if
it contains large number of lines.&lt;/p>
&lt;p>By default, if the target file contains more than &lt;strong>512 * 1024
characters&lt;/strong> (&lt;em>size&lt;/em>), &lt;strong>2 seconds&lt;/strong> timer will start (&lt;em>time&lt;/em>). Alert
message is shown when the timer expired.&lt;/p>
&lt;p>To disable this alert, set the size as zero:&lt;/p>
&lt;pre>&lt;code> --alert size=0
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-Mdebug&lt;/strong>, &lt;strong>-d&lt;/strong>&lt;em>x&lt;/em>&lt;/p>
&lt;p>Debug option is described in &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Adebug">App::Greple::debug&lt;/a> module.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="environment-and-startup-file">ENVIRONMENT and STARTUP FILE&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>GREPLEOPTS&lt;/strong>&lt;/p>
&lt;p>Environment variable GREPLEOPTS is used as a default options. They
are inserted before command line options.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GREPLE_NORC&lt;/strong>&lt;/p>
&lt;p>If set non-empty string, startup file &lt;code>~/.greplerc&lt;/code> is not processed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DEBUG_GETOPT&lt;/strong>&lt;/p>
&lt;p>Enable &lt;a href="https://metacpan.org/pod/Getopt%3A%3ALong">Getopt::Long&lt;/a> debug option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>DEBUG_GETOPTEX&lt;/strong>&lt;/p>
&lt;p>Enable &lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX">Getopt::EX&lt;/a> debug option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>NO_COLOR&lt;/strong>&lt;/p>
&lt;p>If true, all coloring capability with ANSI terminal sequence is
disabled. See &lt;a href="https://no-color.org/">https://no-color.org/&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Before starting execution, &lt;strong>greple&lt;/strong> reads the file named &lt;code>.greplerc&lt;/code>
on user&amp;rsquo;s home directory. Following directives can be used.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>option&lt;/strong> &lt;em>name&lt;/em> string&lt;/p>
&lt;p>Argument &lt;em>name&lt;/em> of &lt;strong>option&lt;/strong> directive is user defined option name.
The rest are processed by &lt;code>shellwords&lt;/code> routine defined in
Text::ParseWords module. Be sure that this module sometimes requires
escape backslashes.&lt;/p>
&lt;p>Any kind of string can be used for option name but it is not combined
with other options.&lt;/p>
&lt;pre>&lt;code> option --fromcode --outside='(?s)\/\*.*?\*\/'
option --fromcomment --inside='(?s)\/\*.*?\*\/'
&lt;/code>&lt;/pre>
&lt;p>If the option named &lt;strong>default&lt;/strong> is defined, it will be used as a
default option.&lt;/p>
&lt;p>For the purpose to include following arguments within replaced
strings, two special notations can be used in option definition.
String &lt;code>$&amp;lt;n&amp;gt;&lt;/code> is replaced by the _n_th argument after the
substituted option, where &lt;em>n&lt;/em> is number start from one. String
&lt;code>$&amp;lt;shift&amp;gt;&lt;/code> is replaced by following command line argument and
the argument is removed from option list.&lt;/p>
&lt;p>For example, when&lt;/p>
&lt;pre>&lt;code> option --line --le &amp;amp;line=$&amp;lt;shift&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>is defined, command&lt;/p>
&lt;pre>&lt;code> greple --line 10,20-30,40
&lt;/code>&lt;/pre>
&lt;p>will be evaluated as this:&lt;/p>
&lt;pre>&lt;code> greple --le &amp;amp;line=10,20-30,40
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>expand&lt;/strong> &lt;em>name&lt;/em> &lt;em>string&lt;/em>&lt;/p>
&lt;p>Define local option &lt;em>name&lt;/em>. Command &lt;strong>expand&lt;/strong> is almost same as
command &lt;strong>option&lt;/strong> in terms of its function. However, option defined
by this command is expanded in, and only in, the process of
definition, while option definition is expanded when command arguments
are processed.&lt;/p>
&lt;p>This is similar to string macro defined by following &lt;strong>define&lt;/strong>
command. But macro expansion is done by simple string replacement, so
you have to use &lt;strong>expand&lt;/strong> to define option composed by multiple
arguments.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>define&lt;/strong> &lt;em>name&lt;/em> string&lt;/p>
&lt;p>Define macro. This is similar to &lt;strong>option&lt;/strong>, but argument is not
processed by &lt;em>shellwords&lt;/em> and treated just a simple text, so
meta-characters can be included without escape. Macro expansion is
done for option definition and other macro definition. Macro is not
evaluated in command line option. Use option directive if you want to
use in command line,&lt;/p>
&lt;pre>&lt;code> define (#kana) \p{InKatakana}
option --kanalist --nocolor -o --join --re '(#kana)+(\n(#kana)+)*'
help --kanalist List up Katakana string
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>help&lt;/strong> &lt;em>name&lt;/em>&lt;/p>
&lt;p>If &lt;strong>help&lt;/strong> directive is used for same option name, it will be printed
in usage message. If the help message is &lt;code>ignore&lt;/code>, corresponding
line won&amp;rsquo;t show up in the usage.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>builtin&lt;/strong> &lt;em>spec&lt;/em> &lt;em>variable&lt;/em>&lt;/p>
&lt;p>Define built-in option which should be processed by option parser.
Arguments are assumed to be &lt;a href="https://metacpan.org/pod/Getopt%3A%3ALong">Getopt::Long&lt;/a> style spec, and
&lt;em>variable&lt;/em> is string start with &lt;code>$&lt;/code>, &lt;code>@&lt;/code> or &lt;code>%&lt;/code>. They will be
replaced by a reference to the object which the string represent.&lt;/p>
&lt;p>See &lt;strong>pgp&lt;/strong> module for example.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>autoload&lt;/strong> &lt;em>module&lt;/em> &lt;em>options&lt;/em> &amp;hellip;&lt;/p>
&lt;p>Define module which should be loaded automatically when specified
option is found in the command arguments.&lt;/p>
&lt;p>For example,&lt;/p>
&lt;pre>&lt;code> autoload -Mdig --dig --git
&lt;/code>&lt;/pre>
&lt;p>replaces option &amp;ldquo;&lt;code>--dig&lt;/code>&amp;rdquo; to &amp;ldquo;&lt;code>-Mdig --dig&lt;/code>&amp;rdquo;, so that &lt;strong>dig&lt;/strong> module
is loaded before processing &lt;code>--dig&lt;/code> option.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Environment variable substitution is done for string specified by
&lt;code>option&lt;/code> and &lt;code>define&lt;/code> directives. Use Perl syntax &lt;strong>$ENV{NAME}&lt;/strong> for
this purpose. You can use this to make a portable module.&lt;/p>
&lt;p>When &lt;strong>greple&lt;/strong> found &lt;code>__PERL__&lt;/code> line in &lt;code>.greplerc&lt;/code> file, the rest
of the file is evaluated as a Perl program. You can define your own
subroutines which can be used by &lt;strong>&amp;ndash;inside&lt;/strong>/&lt;strong>outside&lt;/strong>,
&lt;strong>&amp;ndash;include&lt;/strong>/&lt;strong>exclude&lt;/strong>, &lt;strong>&amp;ndash;block&lt;/strong> options.&lt;/p>
&lt;p>For those subroutines, file content will be provided by global
variable &lt;code>$_&lt;/code>. Expected response from the subroutine is the list of
array references, which is made up by start and end offset pairs.&lt;/p>
&lt;p>For example, suppose that the following function is defined in your
&lt;code>.greplerc&lt;/code> file. Start and end offset for each pattern match can be
taken as array element &lt;code>$-[0]&lt;/code> and &lt;code>$+[0]&lt;/code>.&lt;/p>
&lt;pre>&lt;code>__PERL__
sub odd_line {
my @list;
my $i;
while (/.*\n/g) {
push(@list, [ $-[0], $+[0] ]) if ++$i % 2;
}
@list;
}
&lt;/code>&lt;/pre>
&lt;p>You can use next command to search pattern included in odd number
lines.&lt;/p>
&lt;pre>&lt;code>% greple --inside '&amp;amp;odd_line' pattern files...
&lt;/code>&lt;/pre>
&lt;h2 id="module">MODULE&lt;/h2>
&lt;p>You can expand the &lt;strong>greple&lt;/strong> command using module. Module files are
placed at &lt;code>App/Greple/&lt;/code> directory in Perl library, and therefor has
&lt;strong>App::Greple::module&lt;/strong> package name.&lt;/p>
&lt;p>In the command line, module have to be specified preceding any other
options in the form of &lt;strong>-M&lt;/strong>&lt;em>module&lt;/em>. However, it also can be
specified at the beginning of option expansion.&lt;/p>
&lt;p>If the package name is declared properly, &lt;code>__DATA__&lt;/code> section in the
module file will be interpreted same as &lt;code>.greplerc&lt;/code> file content. So
you can declare the module specific options there. Functions declared
in the module can be used from those options, it makes highly
expandable option/programming interaction possible.&lt;/p>
&lt;p>Using &lt;strong>-M&lt;/strong> without module argument will print available module list.
Option &lt;strong>&amp;ndash;man&lt;/strong> will display module document when used with &lt;strong>-M&lt;/strong>
option. Use &lt;strong>&amp;ndash;show&lt;/strong> option to see the module itself. Option
&lt;strong>&amp;ndash;path&lt;/strong> will print the path of module file.&lt;/p>
&lt;p>See this sample module code. This sample defines options to search
from pod, comment and other segment in Perl script. Those capability
can be implemented both in function and macro.&lt;/p>
&lt;pre>&lt;code>package App::Greple::perl;
use Exporter 'import';
our @EXPORT = qw(pod comment podcomment);
our %EXPORT_TAGS = ( );
our @EXPORT_OK = qw();
use App::Greple::Common;
use App::Greple::Regions;
my $pod_re = qr{^=\w+(?s:.*?)(?:\Z|^=cut\s*\n)}m;
my $comment_re = qr{^(?:[ \t]*#.*\n)+}m;
sub pod {
match_regions(pattern =&amp;gt; $pod_re);
}
sub comment {
match_regions(pattern =&amp;gt; $comment_re);
}
sub podcomment {
match_regions(pattern =&amp;gt; qr/$pod_re|$comment_re/);
}
1;
__DATA__
define :comment: ^(\s*#.*\n)+
define :pod: ^=(?s:.*?)(?:\Z|^=cut\s*\n)
#option --pod --inside :pod:
#option --comment --inside :comment:
#option --code --outside :pod:|:comment:
option --pod --inside '&amp;amp;pod'
option --comment --inside '&amp;amp;comment'
option --code --outside '&amp;amp;podcomment'
&lt;/code>&lt;/pre>
&lt;p>You can use the module like this:&lt;/p>
&lt;pre>&lt;code>greple -Mperl --pod default greple
greple -Mperl --colorful --code --comment --pod default greple
&lt;/code>&lt;/pre>
&lt;p>If special subroutine &lt;code>initialize()&lt;/code> and &lt;code>finalize()&lt;/code> are defined in
the module, they are called at the beginning with
&lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3AModule">Getopt::EX::Module&lt;/a> object as a first argument. Second argument is
the reference to &lt;code>@ARGV&lt;/code>, and you can modify actual &lt;code>@ARGV&lt;/code> using
it. See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Afind">App::Greple::find&lt;/a> module as an example.&lt;/p>
&lt;p>Calling sequence is like this. See &lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3AModule">Getopt::EX::Module&lt;/a> for detail.&lt;/p>
&lt;pre>&lt;code>1) Call initialize()
2) Call function given in -Mmod::func() style
3) Call finalize()
&lt;/code>&lt;/pre>
&lt;h2 id="history">HISTORY&lt;/h2>
&lt;p>Most capability of &lt;strong>greple&lt;/strong> is derived from &lt;strong>mg&lt;/strong> command, which has
been developing from early 1990&amp;rsquo;s by the same author. Because modern
standard &lt;strong>grep&lt;/strong> family command becomes to have similar capabilities,
it is a time to clean up entire functionalities, totally remodel the
option interfaces, and change the command name. (2013.11)&lt;/p>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="http://man.he.net/man1/grep">grep(1)&lt;/a>, &lt;a href="http://man.he.net/man1/perl">perl(1)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX">Getopt::EX&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/Getopt-EX">https://github.com/kaz-utashiro/Getopt-EX&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 1991-2022 Kazumasa Utashiro&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Maozora</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/aozora/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/aozora/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>aozora - Greple module for aozora-bunko proofreading&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Maozora [ options ]&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.01&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>&lt;a href="http://www.aozora.gr.jp/KOSAKU/MANUAL_4.html">http://www.aozora.gr.jp/KOSAKU/MANUAL_4.html&lt;/a>&lt;/p>
&lt;p>OCR入力では、平仮名の「へぺべ」と片仮名の「ヘペベ」がしばしば入れ替わりますが、画面やプリントアウトの校正では、この誤りをみつけることは困難です。&lt;/p>
&lt;p>けれど、正規表現に対応したエディタを使えば、半角の「[]」で片仮名の「ヘペベ」を囲った&lt;/p>
&lt;pre>&lt;code>[ヘペベ]
&lt;/code>&lt;/pre>
&lt;p>を検索語にして、片仮名の「ヘ」「ペ」「ベ」を、まとめてチェックできます。&lt;/p>
&lt;p>正規表現では、通常とは異なり、「[　]」で挟まれた一つ一つの文字すべてが検索対象として指定されます。&lt;/p>
&lt;p>「[青空文庫]」で正規表現の検索を行うと、「青空文庫」という連続した四文字ではなく、「青」「空」「文」「庫」のそれぞれが拾われます。&lt;/p>
&lt;p>見つけ出したい文字列のパターンをどう表現するかといった正規表現の詳細は、解説本やインターネットの記述を参考にしてください。対応するエディタについては、インターネットで調べてください。&lt;/p>
&lt;p>点検グループで用いている正規表現を、参考までにリストアップしておきます。
青空文庫の校正を進める上で、これらが何をあらわしているかを理解する必要はありません。ただ、簡単なものからでも試してもらえれば、作業の効率と精度をあげるのに役立つはずです。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&amp;ndash;katakana-he&lt;/p>
&lt;p>片仮名ヘペベをチェックする。&lt;/p>
&lt;pre>&lt;code> [ヘペベ]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;hiragana-he&lt;/p>
&lt;p>平仮名へぺべをチェックする。&lt;/p>
&lt;p>（多数ヒットしすぎてチェックしづらいときは、次項の正規表現で、誤って入った平仮名へぺべをチェックしてください。）&lt;/p>
&lt;pre>&lt;code> [へぺべ]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;check-he&lt;/p>
&lt;p>平仮名とカタカナの「へべぺ」「ヘベペ」を両方チェックする。
それぞれ異なる色で表示される。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;suspicious-he&lt;/p>
&lt;p>片仮名文字列に接する平仮名へぺべをみて、読み取り誤りをチェックする。&lt;/p>
&lt;pre>&lt;code> [ァ-ヶー][へぺべ]
[へぺべ][ァ-ヶー]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;lonely-katakana&lt;/p>
&lt;p>片仮名文字列でない中に、一字混じった片仮名をチェックする。&lt;/p>
&lt;pre>&lt;code> [^ァ-ヶー][ロエセカニタトリハオ][^ァ-ヶー]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;lonely-non-katakana&lt;/p>
&lt;p>片仮名文字列の中に、一字混じった片仮名ではない文字をチェックする。&lt;/p>
&lt;pre>&lt;code> [ァ-ヶー]+[口工七力二夕卜り一八才][ァ-ヶー]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;kyuji&lt;/p>
&lt;p>新字ファイルに混じる旧字をチェックする。　&lt;/p>
&lt;p>[亞惡壓圍爲醫壹稻飮隱營榮衞驛圓艷鹽奧應歐毆穩假價畫會壞懷繪擴殼覺學嶽樂勸卷歡罐觀關陷巖顏歸氣龜僞戲犧舊據擧峽挾狹堯曉區驅勳徑惠溪經繼莖螢輕鷄藝缺儉劍圈檢權獻縣險顯驗嚴效廣恆鑛號國濟碎齋劑櫻册雜參慘棧蠶贊殘絲齒兒辭濕實舍寫釋壽收從澁獸縱肅處敍奬將燒稱證乘剩壤孃條淨疊穰讓釀囑觸寢愼晉眞盡圖粹醉隨髓數樞聲靜齊攝竊專戰淺潛纖踐錢禪雙壯搜插爭總聰莊裝騷臟藏屬續墮體對帶滯臺瀧擇澤單擔膽團彈斷癡遲晝蟲鑄廳聽敕鎭遞鐵轉點傳黨盜燈當鬪獨讀屆繩貳惱腦霸廢拜賣麥發髮拔蠻祕濱拂佛竝變邊辨辯瓣舖穗寶襃豐沒飜槇萬滿默彌藥譯豫餘與譽搖樣謠遙來亂覽龍兩獵壘勵禮靈齡戀爐勞樓祿亙灣瑤]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;shinji&lt;/p>
&lt;p>旧字ファイルに混じる新字をチェックする。&lt;/p>
&lt;p>[亜悪圧囲為医壱稲飲隠営栄衛駅円艶塩奥応欧殴穏仮価画会壊懐絵拡殻覚学岳楽勧巻歓缶観関陥巌顔帰気亀偽戯犠旧拠挙峡挟狭尭暁区駆勲径恵渓経継茎蛍軽鶏芸欠倹剣圏検権献県険顕験厳効広恒鉱号国済砕斎剤桜冊雑参惨桟蚕賛残糸歯児辞湿実舎写釈寿収従渋獣縦粛処叙奨将焼称証乗剰壌嬢条浄畳穣譲醸嘱触寝慎晋真尽図粋酔随髄数枢声静斉摂窃専戦浅潜繊践銭禅双壮捜挿争総聡荘装騒臓蔵属続堕体対帯滞台滝択沢単担胆団弾断痴遅昼虫鋳庁聴勅鎮逓鉄転点伝党盗灯当闘独読届縄弐悩脳覇廃拝売麦発髪抜蛮秘浜払仏並変辺弁弁弁舗穂宝褒豊没翻槙万満黙弥薬訳予余与誉揺様謡遥来乱覧竜両猟塁励礼霊齢恋炉労楼禄亘湾瑶]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;kogaki&lt;/p>
&lt;p>仮名を小書きしないファイルに紛れ込んだ、小書きをチェックする。&lt;/p>
&lt;p>（物を数える際や地名などに用いる「ヶ」は、外してあります。）&lt;/p>
&lt;pre>&lt;code> [ぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵ]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;lonely-alpha&lt;/p>
&lt;p>全角とするべき可能性の高い、一文字の半角アルファベットをチェックする。&lt;/p>
&lt;pre>&lt;code> [^a-zA-Z][a-zA-Z][^a-zA-Z]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;dot-in-middle&lt;/p>
&lt;p>半角の「.」の後に、半角のアキ（「 」）なしで文字が続くものをチェックする。&lt;/p>
&lt;pre>&lt;code> \.([^ （）p」])
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;space-at-eol&lt;/p>
&lt;p>文末に、不要な空白（全角、半角）が入っていないかをチェックする。&lt;/p>
&lt;pre>&lt;code> [ 　]+$
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;suspicious-nl&lt;/p>
&lt;p>空白もしくは括弧以外が文頭にきているものをみて、誤って入れられた改行をチェックする。&lt;/p>
&lt;p>（底本の行あきをなぞるために入れた改行も、チェックされます。）&lt;/p>
&lt;pre>&lt;code> ^[^　「［（『]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;suspicious-space&lt;/p>
&lt;p>行頭の括弧の前に、青空文庫では入れないことにしている空白がないかをチェックする。&lt;/p>
&lt;pre>&lt;code> ^　[（「『]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;ruby-1&lt;/p>
&lt;p>ルビの中に、仮名以外がないかをチェックする。&lt;/p>
&lt;pre>&lt;code> 《[^《》]*?[^あ-んァ-ヶーゞゝヽヾ・／″＼][^《》]*?》
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;ruby-2&lt;/p>
&lt;p>ルビの文字数に対して、ルビの付く側の文字数が長めのものをみて、「｜」の入れ忘れをチェックする。&lt;/p>
&lt;pre>&lt;code> [\x{3400}-\x{9fff}\x{f900}-\x{fa2d}々]{3,}《
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;ruby-3&lt;/p>
&lt;p>ルビの付く文字が連続するものをみて、過分割をチェックする。&lt;/p>
&lt;pre>&lt;code> 《[^》]+》[^ァ-ヶーあ-ん、。？！―,『』｜「」々]+《[^》]+》
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;ruby-4&lt;/p>
&lt;p>ルビ中の拗促音が小書きされていないものをチェックする。（正しく並みで使われているものもチェックされます。）&lt;/p>
&lt;pre>&lt;code> 《[^《》]*?[つやゆよヤヨツユ][^《》]*?》
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;ruby&lt;/p>
&lt;p>&lt;strong>&amp;ndash;ruby-[1-4]&lt;/strong> を全部チェックする。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;suspicious-brace&lt;/p>
&lt;p>誤入力の可能性の高い、半角の丸括弧「()」と角括弧「[]」をチェックする。&lt;/p>
&lt;pre>&lt;code> [^U][\?\!\#-\&amp;amp;\(-\+\&amp;lt;-\&amp;gt;\[-\]|]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;rare-chars&lt;/p>
&lt;p>使われることのまれな文字をチェックする。&lt;/p>
&lt;pre>&lt;code> [′．･，‥－｢♯□｣､]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;susupicious-ocr&lt;/p>
&lt;p>OCRの読み取りミスや誤入力が生じやすい文字をチェックする。&lt;/p>
&lt;p>（以下で用いられている「|」は、検索語の区切りです。全体をコピーし、検索ウインドウにペーストします。ヒットしたものに誤りの可能性を感じたら、底本を確認してください。）&lt;/p>
&lt;p>米殻|奴隸|釆女|喝釆|壷|壼|会杜|溌刺|撒去|撤布|慰籍|狼籍|酒落|曖味|瞹昧|瞹味|咋日|[気天]侯|王候|鍛治屋|掃って|帰く|因難|粛条|芸著|建薬物|表規|絵仕|猟人形|緒口|野緒|熊々|煮趣|粗の|基だ|挟まれる|立流|繁う|愚かれた|遂われる|借しく|料埋|士地|紳土|弁護土|揚所|抜露|披る|披璃|緑結び|熱柿|探夜|族行|丁推|連蜂|藤椅子|間題|振柚|限鏡|博突|乾焼|春く|海昔|撤[かきくけこ]|茄[だで]|吐潟|裟婆|呷[かきくけこ]|崇[らりるれろ]|且那|梶棒|灰暗い|瑞ぐ|沢庵潰|、辷|咄嵯|相母|きれいだた|失わたい|すまたい|状能|卯何|実似|別在|駑いた|広緑|任掛|族客|迫ひ|荼|陀俤|笶|失はり|失張|迫掛け|誥|仲聞|出違|歳の幕|警傭|対時|意気軒昴|薪手|口借し|遠反|閣魔|趣昧|貴任|崇《たた》|崇《たたり》|紆介|理寮|代日|丁日|大統頷|愛橋|天主闇|埋窟|埋屈|要頷|一骰|輿行|夕碁|哂|肓|遺《や》|柤|聨|惨澹|高梁|衿持|千渉|大低|束京|咋今|咋秋|孟蘭盆|昼問|影讐|神泌|象微|徴動|欺《か》く|遺る|軋礫|粟鼠|驕桿|戦々競々|鉄葉|愛矯|覩察|遣遥|兼葭|堂字|鄭接|天鉄羅|霊揚|奢移|お皺|清洲国|横械|横会|記情|面も|両も|兄い|年棒|逐に|吾響|件[はひふへほ]|大きた|瞬問|塞さに|タ陽|娼帰|一入|日く|精桿|沓《よう》として|沓として|沓渺|沓茫|※［＃小書き平仮名わ|一杖|欺き|夫嫁|憤れ|眠が|悴|報く|別投|絞い|普投|灯寵|韜晦|俳譜|嘲る|擬と|例巧|疳癪|倦も|咳私|一過間|逮廻し|時聞|風間|教本|二と|覚東|衛道|姻突|後喬|共処|鱧|夏に|おるす|摘ん|駁諭|弩窿|追億|読計|臓腋|冒演|冒漬|乾操|出鱈日|移しい|灰燈|散術|限石|塵挨|夫死|髪髴|距雌|七首|任様|棒給|前蝕|タメ急|看護嫁|暮口|績り|備われ|[^相]違[さしすせそ]|達[わいうえ]|覚倍|両《しか》|判延|遠いあ|探[いくけき]|幕史|無隈|端侃|依沽地|摩《なび》|旅騎兵|蕉村|なちば|冩《うつ》|外冠|追る|摩詞不思議|愚かれ|膝顕|什《たお》れ|幕史|廷喜|於で|視神|蝦蝮|実李|鳴咽|──|凡帳面|鐡道|訊間|兔状|艮|末練|一暼|錬倉|郡屋|指輸|手祈|事惰|落書き|亊|擧[校生]|桑かい|嗚[っつ]た|反封|膀手|俤間|伺うし|金昆羅|喇叺|取倣|剌[さしすせそ]|世事|、、|。。|。、|、。|！、|[氣気]特|夾|[反訪]間|此虞|画し|竸|末だ|眥|鳴呼|叮噂|柳か|変た|朦瀧|杯《など》|新開|楝瓦|[へれね]ぱ|譯山|衿り|活撥|[まで]しよう|間達|達う|迫々|咋年|なけれは|含は|人[らりるれろ]|入間|酉洋|相達|あさらか|方画|那蘇|字音|項戴|食掌|肯像|潜越|黙心|畢竜|停立|比際|洒が|任所|木當|亭圭|浩身|母現|牀|速れ|缺鮎|傅説|[畫書]飯|[畫書]食|淡自|目分|白分|白己|感清|人地|差ず|隣れ|評到|宥《よ[いひ]》|都曾|周園|王義|卑狸|減多|腸[っつわるり]|卿筒|有舞う|木当|入家|ようた|かたり|いろいろた|静かた|勿諭|撤《ま》|一且|の問で|侯補|曖簾|[曖瞹]か|一ばい|茸|踉《つ》|真申|丸大|暖炉|燈龍|灯龍|大尺|アメリ力|宜伝|心待ちがい|等[いむまみめ]|伊大利|等敬|欺息|共時|弟一|寵[っるもられりろ]|児る|混度|漸う|巳《や》|代去|灰白い|几て|止当|瓢々|練返|徂合|酪酊|酩酎|酪酎|緑家|凛|埓|出偶|けれは|ならは|すれは|贔屑|脾睨|縞麗|逹|迴|完壁|下句|白身|眺躍&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="http://www.aozora.gr.jp/KOSAKU/MANUAL_4.html">http://www.aozora.gr.jp/KOSAKU/MANUAL_4.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://qiita.com/kaz-utashiro/items/2f199409bdb1e08dc473">https://qiita.com/kaz-utashiro/items/2f199409bdb1e08dc473&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license-and-copyright">LICENSE AND COPYRIGHT&lt;/h2>
&lt;p>Copyright 2014-2019 Kazumasa Utashiro&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mcm</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/cm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/cm/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::cm - Greple module to load colormap file&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;pre>&lt;code>greple -Mcm --load-colormap ...
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>App::Greple::cm is &amp;hellip;&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2020 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mdaemon3</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/daemon3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/daemon3/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>daemon3 - Module for translation of the book &amp;ldquo;The Design and Implementation of the FreeBSD Operating System&amp;rdquo;&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 1.01&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mdaemon3 [ options ]&lt;/p>
&lt;pre>&lt;code>--by &amp;lt;part&amp;gt; makes &amp;lt;part&amp;gt; as a data record
--in &amp;lt;part&amp;gt; search from &amp;lt;part&amp;gt; section
--jp print Japanese chunk
--eg print English chunk
--egjp print Japanese/English chunk
--comment print comment block
--injp search from Japanese text
--ineg search from English text
--inej search from English/Japanese text
--retrieve retrieve given part in plain text
--colorcode show each part in color-coded
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Text is devided into forllowing parts.&lt;/p>
&lt;pre>&lt;code>e English text
j Japanese text
eg English text and comment
jp Japanese text and comment
macro Common roff macro
retain Retained original text
comment Comment block
com1 Level 1 comment
com2 Level 2 comment
com3 Level 3 comment
mark .EG, .JP, .EJ mark lines
gap empty line between English and Japanese
&lt;/code>&lt;/pre>
&lt;p>So [ macro ] + [ e ] recovers original text, and [ macro ] + [ j ]
produces Japanese version of book text. You can do it by next
command.&lt;/p>
&lt;pre>&lt;code>$ greple -Mdaemon3 --retrieve macro,e
$ greple -Mdaemon3 --retrieve macro,j
&lt;/code>&lt;/pre>
&lt;h2 id="option">OPTION&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;by&lt;/strong> &lt;em>part&lt;/em>&lt;/p>
&lt;p>Makes &lt;em>part&lt;/em> as a unit of output. Multiple part can be given
connected by commma.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;in&lt;/strong> &lt;em>part&lt;/em>&lt;/p>
&lt;p>Search pattern only from specified &lt;em>part&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;roffsafe&lt;/strong>&lt;/p>
&lt;p>Exclude pattern included in roff comment and index.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;retrieve&lt;/strong> &lt;em>part&lt;/em>&lt;/p>
&lt;p>Retrieve specified part as a plain text.&lt;/p>
&lt;p>Special word &lt;em>all&lt;/em> means &lt;em>macro&lt;/em>, &lt;em>mark&lt;/em>, &lt;em>e&lt;/em>, &lt;em>j&lt;/em>, &lt;em>comment&lt;/em>,
&lt;em>retain&lt;/em>, &lt;em>gap&lt;/em>. Next command produces original text.&lt;/p>
&lt;pre>&lt;code> greple -Mdaemon3 --retrieve all
&lt;/code>&lt;/pre>
&lt;p>If the &lt;em>part&lt;/em> start with minus (&amp;rsquo;-&amp;rsquo;) character, it is removed from
specification. Without positive specification, &lt;em>all&lt;/em> is assumed. So
next command print all lines other than &lt;em>retain&lt;/em> part.&lt;/p>
&lt;pre>&lt;code> greple -Mdaemon3 --retrieve -retain
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;colorcode&lt;/strong>&lt;/p>
&lt;p>Produce color-coded result.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;p>Produce original text.&lt;/p>
&lt;pre>&lt;code>$ greple -Mdaemon3 --retrieve macro,e
&lt;/code>&lt;/pre>
&lt;p>Search sequence of &amp;ldquo;system call&amp;rdquo; in Japanese text and print &lt;em>egjp&lt;/em>
part including them. Note that this print lines even if &amp;ldquo;system&amp;rdquo; and
&amp;ldquo;call&amp;rdquo; is devided by newline.&lt;/p>
&lt;pre>&lt;code>$ greple -Mdaemon3 -e &amp;quot;system call&amp;quot; --by egjp --in j
&lt;/code>&lt;/pre>
&lt;p>Seach English text block which include all of &amp;ldquo;socket&amp;rdquo;, &amp;ldquo;system&amp;rdquo;,
&amp;ldquo;call&amp;rdquo;, &amp;ldquo;error&amp;rdquo; and print &lt;em>egjp&lt;/em> block including them.&lt;/p>
&lt;pre>&lt;code>$ greple -Mdaemo3 &amp;quot;socket system call error&amp;quot; --by egjp --in e
&lt;/code>&lt;/pre>
&lt;p>Look the file conents each part colored in different color.&lt;/p>
&lt;pre>&lt;code>$ greple -Mdaemon3 --colorcode
&lt;/code>&lt;/pre>
&lt;p>Look the colored contents with all other staff&lt;/p>
&lt;pre>&lt;code>$ greple -Mdaemon3 --colorcode --all
&lt;/code>&lt;/pre>
&lt;p>Compare produced result to original file.&lt;/p>
&lt;pre>&lt;code>$ diff -U-1 &amp;lt;(lv file) &amp;lt;(greple -Mdaemon3 --retrieve macro,j) | sdif
&lt;/code>&lt;/pre>
&lt;h2 id="text-format">TEXT FORMAT&lt;/h2>
&lt;h3 id="pattern-1">Pattern 1&lt;/h3>
&lt;p>Simple Translation&lt;/p>
&lt;pre>&lt;code>.\&amp;quot; Copyright 2004 M. K. McKusick
.Dt $Date: 2013/12/23 09:04:26 $
.Vs $Revision: 1.3 $
.EG \&amp;quot;---------------------------------------- ENGLISH
.H 2 &amp;quot;\*(Fb Facilities and the Kernel&amp;quot;
.JP \&amp;quot;---------------------------------------- JAPANESE
.H 2 &amp;quot;\*(Fb の機能とカーネルの役割&amp;quot;
.EJ \&amp;quot;---------------------------------------- END
&lt;/code>&lt;/pre>
&lt;h3 id="pattern-2">Pattern 2&lt;/h3>
&lt;p>Sentence-by-sentence Translation&lt;/p>
&lt;pre>&lt;code>.PP
.EG \&amp;quot;---------------------------------------- ENGLISH
The \*(Fb kernel provides four basic facilities:
processes,
a filesystem,
communications, and
system startup.
This section outlines where each of these four basic services
is described in this book.
.JP \&amp;quot;---------------------------------------- JAPANESE
The \*(Fb kernel provides four basic facilities:
processes,
a filesystem,
communications, and
system startup.
\*(Fb カーネルは、プロセス、ファイルシステム、通信、
システムの起動という4つの基本サービスを提供する。
This section outlines where each of these four basic services
is described in this book.
本節では、これら4つの基本サービスが本書の中のどこで扱われるかを解説する。
.EJ \&amp;quot;---------------------------------------- END
&lt;/code>&lt;/pre>
&lt;h3 id="comment">COMMENT&lt;/h3>
&lt;p>Block start with ※ (kome-mark) character is comment block.&lt;/p>
&lt;pre>&lt;code>.JP \&amp;quot;---------------------------------------- JAPANESE
The
.GL kernel
is the part of the system that runs in protected mode and mediates
access by all user programs to the underlying hardware (e.g.,
.Sm CPU ,
keyboard, monitor, disks, network links)
and software constructs
(e.g., filesystem, network protocols).
.GL カーネル
は、システムの一部として特権モードで動作し、
すべてのユーザプログラムがハードウェア (\c
.Sm CPU 、
モニタ、ディスク、ネットワーク接続等) や、ソフトウェア資源
(ファイルシステム、ネットワークプロトコル等)
にアクセスするための調停を行う。
※
protected mode は、ここでしか使われていないため、
protection mode と誤解されないために特権モードと訳すことにする。
&lt;/code>&lt;/pre>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;p>cpanm App::Greple::daemon3&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright (C) Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-daemon3">https://github.com/kaz-utashiro/greple-daemon3&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="pod-errors">POD ERRORS&lt;/h2>
&lt;p>Hey! &lt;strong>The above document had some coding errors, which are explained below:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Around line 132:&lt;/p>
&lt;p>Non-ASCII character seen before =encoding in &amp;lsquo;の機能とカーネルの役割&amp;quot;&amp;rsquo;. Assuming UTF-8&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: greple -Mfbsd2</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/fbsd2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/fbsd2/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::fbsd2 - It&amp;rsquo;s new $module&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;pre>&lt;code>use App::Greple::fbsd2;
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>App::Greple::fbsd2 is &amp;hellip;&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright (C) Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro &lt;a href="mailto:kaz@utashiro.com">kaz@utashiro.com&lt;/a>&lt;/p></description></item><item><title>Docs: greple -Mframe</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/frame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/frame/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-frame/actions">&lt;img src="https://github.com/kaz-utashiro/greple-frame/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-frame">&lt;img src="https://badge.fury.io/pl/App-Greple-frame.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::frame - Greple frame output module&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mframe &amp;ndash;frame &amp;hellip;&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Greple -Mframe module provide a capability to put surrounding frames
for each blocks.&lt;/p>
&lt;p>&lt;code>top&lt;/code>, &lt;code>middle&lt;/code> and &lt;code>bottom&lt;/code> frames are printed for blocks.&lt;/p>
&lt;p>By default &lt;strong>&amp;ndash;join-blocks&lt;/strong> option is enabled to collect consecutive
lines into a single block. If you don&amp;rsquo;t like this, override it by
&lt;strong>&amp;ndash;no-join-blocks&lt;/strong> option.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;frame&lt;/strong>&lt;/p>
&lt;p>Set frame and fold long lines with frame-friendly prefix string.
Folding width is taken from the terminal. Or you can specify the
width by calling &lt;strong>set&lt;/strong> function with module option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;set-frame-width&lt;/strong>=&lt;em>#&lt;/em>&lt;/p>
&lt;p>Set frame width. You have to put this option before &lt;strong>&amp;ndash;frame&lt;/strong>
option. See &lt;strong>set&lt;/strong> function in &lt;a href="#function">&amp;ldquo;FUNCTION&amp;rdquo;&lt;/a> section.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div>
&lt;p>&lt;img width="75%" src="https://raw.githubusercontent.com/kaz-utashiro/greple-frame/main/images/terminal-3.png">
&lt;/div>
&lt;h2 id="function">FUNCTION&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>set&lt;/strong>(&lt;strong>width&lt;/strong>=&lt;em>n&lt;/em>)&lt;/p>
&lt;p>Set terminal width to &lt;em>n&lt;/em>. Use like this:&lt;/p>
&lt;pre>&lt;code> greple -Mframe::set(width=80) ...
greple -Mframe::set=width=80 ...
&lt;/code>&lt;/pre>
&lt;p>If non-digit character is found in the value part, it is considered as
a Reverse Polish Notation, starting terminal width pushed on the
stack. RPN &lt;code>2/3-&lt;/code> means &lt;code>terminal-width / 2 - 3&lt;/code>.&lt;/p>
&lt;p>You can use like this:&lt;/p>
&lt;pre>&lt;code> greple -Mframe::set=width=2/3- --frame --uc '(\w+::)+\w+' --git | ansicolumn -PC2
&lt;/code>&lt;/pre>
&lt;div>
&lt;p>&lt;img width="75%" src="https://raw.githubusercontent.com/kaz-utashiro/greple-frame/main/images/terminal-column.png">
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3Aansifold">App::ansifold&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/Math%3A%3ARPN">Math::RPN&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mgit</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/git/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-git/actions">&lt;img src="https://github.com/kaz-utashiro/greple-git/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-git">&lt;img src="https://badge.fury.io/pl/App-Greple-git.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>git - Greple git module&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;pre>&lt;code>greple -Mgit ...
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>App::Greple::git is a greple module to handle git output.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;color-blame-line&lt;/strong>, &lt;strong>&amp;ndash;color-blame&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;color-blame-label&lt;/strong>&lt;/p>
&lt;p>Read &lt;a href="http://man.he.net/man1/git-blame">git-blame(1)&lt;/a> output and apply unique color for each commit
id. Option &lt;strong>&amp;ndash;color-blame&lt;/strong> and &lt;strong>&amp;ndash;color-blame-line&lt;/strong> colorize whole
line, while &lt;strong>&amp;ndash;color-blame-label&lt;/strong> does only labels.&lt;/p>
&lt;p>Set &lt;code>$HOME/.gitconfig&lt;/code> like this:&lt;/p>
&lt;pre>&lt;code> [pager]
blame = greple -Mgit --color-blame-line | env LESSANSIENDCHARS=mK less -cR
&lt;/code>&lt;/pre>
&lt;div>
&lt;p>&lt;img width="75%" src="https://raw.githubusercontent.com/kaz-utashiro/greple-git/main/images/git-blame-small.jpg">
&lt;/div>
&lt;div>
&lt;p>&lt;img width="75%" src="https://raw.githubusercontent.com/kaz-utashiro/greple-git/main/images/git-blame-label-small.jpg">
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h2 id="environment">ENVIRONMENT&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>LESS&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>LESSANSIENDCHARS&lt;/strong>&lt;/p>
&lt;p>Since &lt;strong>greple&lt;/strong> produces ANSI Erase Line terminal sequence, it is
convenient to set &lt;strong>less&lt;/strong> command understand them.&lt;/p>
&lt;pre>&lt;code> LESS=-cR
LESSANSIENDCHARS=mK
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;pre>&lt;code>$ cpanm App::Greple::git
&lt;/code>&lt;/pre>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3Asdif">App::sdif&lt;/a>: git diff support&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2021-2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mical</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/ical/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/ical/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-ical/actions">&lt;img src="https://github.com/kaz-utashiro/greple-ical/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-ical">&lt;img src="https://badge.fury.io/pl/App-Greple-ical.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>ical - Module to support Apple macOS Calendar data&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mical [ options ]&lt;/p>
&lt;pre>&lt;code>--simple print data in on line
--detail print one line data with descrition if available
&lt;/code>&lt;/pre>
&lt;p>Exported functions&lt;/p>
&lt;pre>&lt;code>&amp;amp;print_ical_simple
&amp;amp;print_ical_desc
&amp;amp;print_ical_detail
&lt;/code>&lt;/pre>
&lt;h2 id="samples">SAMPLES&lt;/h2>
&lt;p>greple -Mical [ -dnf ] &amp;hellip;&lt;/p>
&lt;p>greple -Mical &amp;ndash;simple &amp;hellip;&lt;/p>
&lt;p>greple -Mical &amp;ndash;detail &amp;hellip;&lt;/p>
&lt;p>greple -Mical &amp;ndash;all &amp;ndash;print print_desc &amp;hellip;&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Used without options, it will search all macOS Calendar files under
user&amp;rsquo;s home directory.&lt;/p>
&lt;p>With &lt;strong>&amp;ndash;simple&lt;/strong> option, summarize content in single line. Output is
not sorted.&lt;/p>
&lt;p>With &lt;strong>&amp;ndash;detail&lt;/strong> option, print summarized line with description data
if it is attached. The result is sorted.&lt;/p>
&lt;p>Sample:&lt;/p>
&lt;pre>&lt;code> BEGIN:VEVENT
UID:19970901T130000Z-123401@host.com
DTSTAMP:19970901T1300Z
DTSTART:19970903T163000Z
DTEND:19970903T190000Z
SUMMARY:Annual Employee Review
CLASS:PRIVATE
CATEGORIES:BUSINESS,HUMAN RESOURCES
END:VEVENT
&lt;/code>&lt;/pre>
&lt;h2 id="tips">TIPS&lt;/h2>
&lt;p>Use &lt;code>-dfn&lt;/code> option to observe the command running status.&lt;/p>
&lt;p>Use &lt;code>-ds&lt;/code> option to see statistics information such as how many files
were searched.&lt;/p>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>RFC2445&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2017-2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mjq</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/jq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/jq/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-jq/actions">&lt;img src="https://github.com/kaz-utashiro/greple-jq/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-jq">&lt;img src="https://badge.fury.io/pl/App-Greple-jq.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>greple -Mjq - greple module to search JSON data with jq&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mjq &amp;ndash;glob JSON-DATA &amp;ndash;IN label pattern&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.05&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This is an experimental module for &lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a> to search JSON
formatted text using &lt;a href="http://man.he.net/man1/jq">jq(1)&lt;/a> as a backend.&lt;/p>
&lt;p>Search top level json object which includes both &lt;code>Marvin&lt;/code> and
&lt;code>Zaphod&lt;/code> somewhere in its text representation.&lt;/p>
&lt;pre>&lt;code>greple -Mjq 'Marvin Zaphod'
&lt;/code>&lt;/pre>
&lt;p>You can search object &lt;code>.commit.author.name&lt;/code> includes &lt;code>Marvin&lt;/code> like this:&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN .commit.author.name Marvin
&lt;/code>&lt;/pre>
&lt;p>Search first &lt;code>name&lt;/code> field including &lt;code>Marvin&lt;/code> under &lt;code>.commit&lt;/code>:&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN .commit..name Marvin
&lt;/code>&lt;/pre>
&lt;p>Search any &lt;code>author.name&lt;/code> field including &lt;code>Marvin&lt;/code>:&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN author.name Marvin
&lt;/code>&lt;/pre>
&lt;p>Search &lt;code>name&lt;/code> is &lt;code>Marvin&lt;/code> and &lt;code>type&lt;/code> is &lt;code>Robot&lt;/code> or &lt;code>Android&lt;/code>:&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN name Marvin --IN type 'Robot|Android'
&lt;/code>&lt;/pre>
&lt;p>Please be aware that this is just a text matching tool for indented
result of &lt;a href="http://man.he.net/man1/jq">jq(1)&lt;/a> command. So, for example, &lt;code>.commit.author&lt;/code>
includes everything under it and it matches &lt;code>committer&lt;/code> field name.
Use &lt;a href="http://man.he.net/man1/jq">jq(1)&lt;/a> filter for more complex and precise operation.&lt;/p>
&lt;h2 id="caution">CAUTION&lt;/h2>
&lt;p>&lt;a href="http://man.he.net/man1/greple">greple(1)&lt;/a> commands read entire input before processing. So it
should not be used for gigantic data or infinite stream.&lt;/p>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;pre>&lt;code>$ cpanm App::Greple::jq
&lt;/code>&lt;/pre>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;IN&lt;/strong> &lt;em>label&lt;/em> &lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Search &lt;em>pattern&lt;/em> included in &lt;em>label&lt;/em> field.&lt;/p>
&lt;p>Character &lt;code>%&lt;/code> can be used as a wildcard in &lt;em>label&lt;/em> string. So
&lt;code>%name&lt;/code> matches labels end with &lt;code>name&lt;/code>, and &lt;code>name%&lt;/code> matches labels
start with &lt;code>name&lt;/code>.&lt;/p>
&lt;p>If the label is simple string like &lt;code>name&lt;/code>, it matches any level of
JSON data.&lt;/p>
&lt;p>If the label string contains period (&lt;code>.&lt;/code>), it is considered as a
nested labels. Name &lt;code>.name&lt;/code> matches only &lt;code>name&lt;/code> label at the top
level. Name &lt;code>process.name&lt;/code> matches only &lt;code>name&lt;/code> entry of some
&lt;code>process&lt;/code> hash.&lt;/p>
&lt;p>If labels are separated by two or more dots (&lt;code>..&lt;/code>), they don&amp;rsquo;t have
to have direct relationship.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;NOT&lt;/strong> &lt;em>label&lt;/em> &lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify negative condition.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;MUST&lt;/strong> &lt;em>label&lt;/em> &lt;em>pattern&lt;/em>&lt;/p>
&lt;p>Specify required condition. If there is one or more required
condition, all other positive rules move to optional. They are not
required but highlighted if exist.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="label-syntax">LABEL SYNTAX&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>.file&lt;/strong>&lt;/p>
&lt;p>&lt;code>file&lt;/code> at the top level.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>.file.path&lt;/strong>&lt;/p>
&lt;p>&lt;code>path&lt;/code> under &lt;code>.file&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>.file..path&lt;/strong>&lt;/p>
&lt;p>&lt;code>path&lt;/code> in descendants of &lt;code>.file&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>path&lt;/strong>&lt;/p>
&lt;p>&lt;code>path&lt;/code> at any level.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>file.path&lt;/strong>&lt;/p>
&lt;p>&lt;code>file.path&lt;/code> at any level.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>file..path&lt;/strong>&lt;/p>
&lt;p>Some &lt;code>path&lt;/code> in descendants of some &lt;code>file&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>%path&lt;/strong>&lt;/p>
&lt;p>Any labels end with &lt;code>path&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>path%&lt;/strong>&lt;/p>
&lt;p>Any labels start with &lt;code>path&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>%path%&lt;/strong>&lt;/p>
&lt;p>Any labels include &lt;code>path&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="examples">EXAMPLES&lt;/h2>
&lt;p>Search from any &lt;code>name&lt;/code> labels.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN name _mina
&lt;/code>&lt;/pre>
&lt;p>Search from &lt;code>.process.name&lt;/code> label.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN .process.name _mina
&lt;/code>&lt;/pre>
&lt;p>Object &lt;code>.process.name&lt;/code> contains &lt;code>_mina&lt;/code> and &lt;code>.event&lt;/code> contains
&lt;code>EXEC&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN .process.name _mina --IN .event EXEC
&lt;/code>&lt;/pre>
&lt;p>Object &lt;code>ppid&lt;/code> is 803 and &lt;code>.event&lt;/code> contains &lt;code>FORK&lt;/code> or &lt;code>EXEC&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN ppid 803 --IN event 'FORK|EXEC'
&lt;/code>&lt;/pre>
&lt;p>Object &lt;code>name&lt;/code> is &lt;code>_mina&lt;/code> and &lt;code>.event&lt;/code> contains &lt;code>CREATE&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN name _mina --IN event 'CREATE'
&lt;/code>&lt;/pre>
&lt;p>Object &lt;code>ancestors&lt;/code> contains &lt;code>1132&lt;/code> and &lt;code>.event&lt;/code> contains &lt;code>EXEC&lt;/code>
with &lt;code>arguments&lt;/code> highlighted.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN ancestors 1132 --IN event EXEC --IN arguments .
&lt;/code>&lt;/pre>
&lt;p>Object &lt;code>*pid&lt;/code> label contains 803.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN %pid 803
&lt;/code>&lt;/pre>
&lt;p>Object any &amp;lt;path&amp;gt; contains &lt;code>_mina&lt;/code> under &lt;code>.file&lt;/code> and &lt;code>.event&lt;/code>
contains &lt;code>WRITE&lt;/code>.&lt;/p>
&lt;pre>&lt;code>greple -Mjq --IN .file..path _mina --IN .event WRITE
&lt;/code>&lt;/pre>
&lt;h2 id="tips">TIPS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Use &lt;code>--all&lt;/code> option to show entire data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>--nocolor&lt;/code> option or set &lt;code>NO_COLOR=1&lt;/code> to disable colored
output.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>-o&lt;/code> option to show only matched part.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>--blockend=&lt;/code> option to cancel showing block separator.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Since this module implements original search function, &lt;a href="http://man.he.net/man1/greple">greple(1)&lt;/a>
&lt;strong>-i&lt;/strong> does not take effect. Set modifier in regex like &lt;code>(?i)pattern&lt;/code>
if you want case-insensitive match.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>-Mjq::set=debug&lt;/code> to see actual regex.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>-Mjq::set=noif&lt;/code> if you don&amp;rsquo;t have to use &lt;a href="https://metacpan.org/pod/jq">jq&lt;/a> as an input
filter. Data have to be well-formatted in that case.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>--color=always&lt;/code> and set &lt;code>LESSANSIENDCHARS=mK&lt;/code> if you want to
see the output using &lt;a href="http://man.he.net/man1/less">less(1)&lt;/a>. Put next line in your &lt;code>~/.greplerc&lt;/code>
to enable colored output always.&lt;/p>
&lt;pre>&lt;code> option default --color=always
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://stedolan.github.io/jq/">https://stedolan.github.io/jq/&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2022 Kazumasa Utashiro&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mmecab</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/mecab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/mecab/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>mecab - Greple module to produce result by mecab&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.01&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mmecab&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Work in progress.&lt;/p>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3Acdif%3A%3ACommand%3A%3Amecab">App::cdif::Command::mecab&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2019- Kazumasa Utashiro.&lt;/p>
&lt;p>These commands and libraries are free software; you can redistribute
it and/or modify it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mmsdoc</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/msdoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/msdoc/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-msdoc/actions">&lt;img src="https://github.com/kaz-utashiro/greple-msdoc/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-msdoc">&lt;img src="https://badge.fury.io/pl/App-Greple-msdoc.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>msdoc - Greple module for access MS office docx/pptx/xlsx documents&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 1.06&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mmsdoc pattern example.docx&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This module makes it possible to search string in Microsoft
docx/pptx/xlsx file.&lt;/p>
&lt;p>Microsoft document consists of multiple files archived in zip format.
String information is stored in &amp;ldquo;word/document.xml&amp;rdquo;,
&amp;ldquo;ppt/slides/*.xml&amp;rdquo; or &amp;ldquo;xl/sharedStrings.xml&amp;rdquo;. This module extracts
these data and replaces the search target.&lt;/p>
&lt;p>By default, text part from XML data is extracted. This process is
done by very simple method and may include redundant information.&lt;/p>
&lt;p>Strings are simply connected into paragraph for &lt;em>.docx&lt;/em> and &lt;em>.pptx&lt;/em>
document. For &lt;em>.xlsx&lt;/em> document, single space is inserted between
them. Use &lt;strong>&amp;ndash;separator&lt;/strong> option to change this behavior.&lt;/p>
&lt;p>After every paragraph, single newline is inserted for &lt;em>.pptx&lt;/em> and
&lt;em>.xlsx&lt;/em> file, and double newlines for &lt;em>.docx&lt;/em> file. Use
&lt;strong>&amp;ndash;space&lt;/strong> option to change.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dump&lt;/strong>&lt;/p>
&lt;p>Simply print all converted data. Additional pattern can be specified,
and they will be highlighted inside whole text.&lt;/p>
&lt;pre>&lt;code> $ greple -Mmsdoc --dump -e foo -e bar buz.docx
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;space&lt;/strong>=&lt;em>n&lt;/em>&lt;/p>
&lt;p>Specify number of newlines inserted after every paragraph. Any
non-negative integer is allowed including zero.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;separator&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;p>Specify the separator string placed between each component strings.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;indent&lt;/strong>&lt;/p>
&lt;p>Extract indented XML document, not a plain text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;indent-mark&lt;/strong>=&lt;em>string&lt;/em>&lt;/p>
&lt;p>Set indentation string. Default is &lt;code>| &lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;p>cpanm App::Greple::msdoc&lt;/p>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>,
&lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Amsdoc">App::Greple::msdoc&lt;/a>,
&lt;a href="https://github.com/kaz-utashiro/greple-msdoc">https://github.com/kaz-utashiro/greple-msdoc&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3Aoptex%3A%3Atextconv">App::optex::textconv&lt;/a>,
&lt;a href="https://github.com/kaz-utashiro/optex-textconv">https://github.com/kaz-utashiro/optex-textconv&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2018-2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mppi</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/ppi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/ppi/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-ppi/actions">&lt;img src="https://github.com/kaz-utashiro/greple-ppi/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-ppi">&lt;img src="https://badge.fury.io/pl/App-Greple-ppi.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>ppi - Greple module to use Perl PPI module&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mppi&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.01&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Greple module to use Perl PPI module. This is just a work in
progress experimental module.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dumper&lt;/strong>&lt;/p>
&lt;p>Dump PDOM trees produced by PPI::Dumper module.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;cdumper&lt;/strong>&lt;/p>
&lt;p>Colorize dumped data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;top&lt;/strong>&lt;/p>
&lt;p>Make search data block top level object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;state&lt;/strong>&lt;/p>
&lt;p>Make search data block PPI::Statement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;prune&lt;/strong>=&lt;em>type&lt;/em>&lt;/p>
&lt;p>Remove &lt;em>type&lt;/em> object from tree. This option have to be used before
any other options.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2022 Kazumasa Utashiro&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mpw</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/pw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/pw/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>pw - Module to get password from file&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mpw pattern file&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>0.01&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This module searches id and password information those written in text
file, and displays them interactively. Passwords are not shown on
display by default, but you can copy them into clipboard by specifying
item mark.&lt;/p>
&lt;p>PGP encrypted file can be handled by &lt;strong>greple&lt;/strong> standard feature.
Command &amp;ldquo;&lt;strong>gpg&lt;/strong>&amp;rdquo; is invoked for files with &amp;ldquo;&lt;em>.gpg&lt;/em>&amp;rdquo; suffix by
default. Option &lt;strong>&amp;ndash;pgp&lt;/strong> is also available, then you can type
passphrase only once for searching from multiple files. Consult
&lt;strong>&amp;ndash;if&lt;/strong> option if you are using other encryption style.&lt;/p>
&lt;p>Terminal scroll buffer and screen is cleared when command exits, and
content of clipboard is replaced by prepared string, so that important
information does not remain on the terminal.&lt;/p>
&lt;p>Id and password is collected from text using some keywords like
&amp;ldquo;user&amp;rdquo;, &amp;ldquo;account&amp;rdquo;, &amp;ldquo;password&amp;rdquo;, &amp;ldquo;pin&amp;rdquo; and so on. To see actual data,
use &lt;strong>pw_status&lt;/strong> function described below.&lt;/p>
&lt;p>Some bank use random number matrix as a countermeasure for tapping.
If the module successfully guessed the matrix area, it blackout the
table and remember them.&lt;/p>
&lt;pre>&lt;code> | A B C D E F G H I J
--+--------------------
0 | Y W 0 B 8 P 4 C Z H
1 | M 0 6 I K U C 8 6 Z
2 | 7 N R E Y 1 9 3 G 5
3 | 7 F A X 9 B D Y O A
4 | S D 2 2 Q V J 5 4 T
&lt;/code>&lt;/pre>
&lt;p>Enter the field position to get the cell items like:&lt;/p>
&lt;pre>&lt;code>&amp;gt; E3 I0 C4
&lt;/code>&lt;/pre>
&lt;p>and you will get the answer:&lt;/p>
&lt;pre>&lt;code>9 Z 2
&lt;/code>&lt;/pre>
&lt;p>Case is ignored and white space is not necessary, so you can type like
this as well:&lt;/p>
&lt;pre>&lt;code>&amp;gt; e3i0c4
&lt;/code>&lt;/pre>
&lt;h2 id="interface">INTERFACE&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>pw_print&lt;/strong>&lt;/p>
&lt;p>Data print function. This function is set for &lt;strong>&amp;ndash;print&lt;/strong> option of
&lt;strong>greple&lt;/strong> by default, and user doesn&amp;rsquo;t have to care about it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pw_epilogue&lt;/strong>&lt;/p>
&lt;p>Epilogue function. This function is set for &lt;strong>&amp;ndash;end&lt;/strong> option of
&lt;strong>greple&lt;/strong> by default, and user doesn&amp;rsquo;t have to care about it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pw_option&lt;/strong>&lt;/p>
&lt;p>Several parameters can be set by &lt;strong>pw_option&lt;/strong> function. If you do not
want to clear screen after command execution, call &lt;strong>pw_option&lt;/strong> like:&lt;/p>
&lt;pre>&lt;code> greple -Mpw::pw_option(clear_screen=0)
&lt;/code>&lt;/pre>
&lt;p>or:&lt;/p>
&lt;pre>&lt;code> greple -Mpw --begin pw_option(clear_screen=0)
&lt;/code>&lt;/pre>
&lt;p>with appropriate quotation.&lt;/p>
&lt;p>Currently following options are available:&lt;/p>
&lt;pre>&lt;code> clear_clipboard
clear_string
clear_screen
clear_buffer
goto_home
browser
timeout
parse_matrix
parse_id
parse_pw
id_keys
id_chars
id_color
id_label_color
pw_keys
pw_chars
pw_color
pw_label_color
pw_blackout
debug
&lt;/code>&lt;/pre>
&lt;p>Password is not blacked out when &lt;strong>pw_blackout&lt;/strong> is 0. If it is 1, all
password characters are replaced by &amp;lsquo;x&amp;rsquo;. If it is greater than 1,
password is replaced by sequence of &amp;lsquo;x&amp;rsquo; indicated by that number.&lt;/p>
&lt;p>&lt;strong>id_keys&lt;/strong> and &lt;strong>pw_keys&lt;/strong> are list, and list members are separated by
whitespaces. When the value start with &amp;lsquo;&lt;strong>+&lt;/strong>&amp;rsquo; mark, it is appended to
current list.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pw_status&lt;/strong>&lt;/p>
&lt;p>Print option status. Next command displays defaults.&lt;/p>
&lt;pre>&lt;code> greple -Mpw::pw_status= dummy /dev/null
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App::Greple">App::Greple&lt;/a>, &lt;a href="https://metacpan.org/pod/App::Greple::pw">App::Greple::pw&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-pw">https://github.com/kaz-utashiro/greple-pw&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright (C) 2017-2020 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Msccc2</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/sccc2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/sccc2/</guid><description>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>sccc2 - Greple module for Secure Coding in C and C++ (2nd Edition)&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 2.02&lt;/p>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;p>cpanm で git リポジトリを指定：&lt;/p>
&lt;pre>&lt;code>cpanm git@github.com:JPCERTCC/greple-sccc2.git
cpanm https://github.com/JPCERTCC/greple-sccc2.git
&lt;/code>&lt;/pre>
&lt;p>または、clone して&lt;/p>
&lt;pre>&lt;code>cpanm .
&lt;/code>&lt;/pre>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Msccc2 [ options ]&lt;/p>
&lt;h2 id="option">OPTION&lt;/h2>
&lt;h3 id="ファイル">ファイル&lt;/h3>
&lt;p>環境変数 &lt;code>$SCCC2DIR&lt;/code> を設定すれば、以下のオプションで第一版、第二版の
原稿を検索できる。&lt;/p>
&lt;pre>&lt;code>--ed1 search 1st edition
--ed2 search 2nd edition
&lt;/code>&lt;/pre>
&lt;h3 id="検索対象">検索対象&lt;/h3>
&lt;pre>&lt;code>--in &amp;lt;part&amp;gt; search in &amp;lt;part&amp;gt;
(jp, eg, jptxt, egtxt, comment, figure, table)
&lt;/code>&lt;/pre>
&lt;h3 id="表示範囲">表示範囲&lt;/h3>
&lt;pre>&lt;code>--by &amp;lt;part&amp;gt; display by &amp;lt;part&amp;gt;
(jp, eg, jptxt, egtxt, comment, figure, table)
--jp display Japanese block
--jptxt display Japanese text block
--eg display English block
--egtxt display English text block
--egjp display jp/eg combined block
&lt;/code>&lt;/pre>
&lt;h3 id="除外範囲">除外範囲&lt;/h3>
&lt;pre>&lt;code>--extable exclude table
--exfigure exclude figure
--exexample exclude example
--excomment exclude comment
--join-block join block into single line
&lt;/code>&lt;/pre>
&lt;h3 id="用語検査">用語検査&lt;/h3>
&lt;pre>&lt;code>--wordcheck check against the dictionary
--wordcheck --stat show statistics only
--wordcheck --with-stat print with statistics
&lt;/code>&lt;/pre>
&lt;h3 id="表示">表示&lt;/h3>
&lt;pre>&lt;code>--com show all comments
--com1 show comment level 1
--com2 show comment level 2
--com3 show comment level 3
--com2+ show comment level 2 or &amp;lt;
--retrieve retrieve given part in plain text
--colorcode show each part in color-coded
--oldcite old style 2digit citation
--newcite new style 4digit citation
&lt;/code>&lt;/pre>
&lt;h2 id="document-format">DOCUMENT FORMAT&lt;/h2>
&lt;pre>&lt;code>Society's increased dependency on networked software systems has been
matched by an increase in the number of attacks aimed at these
systems.
社会がネットワーク化したソフトウェアシステムへの依存を深めるにつれ、こ
れらのシステムを狙った攻撃の数は増加の一途を辿っています。
※ comment level 1
※※ comment level 2
※※※ comment level 3
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Text is devided into forllowing parts.&lt;/p>
&lt;pre>&lt;code>egtxt English text
jptxt Japanese text
eg English text and comment
jp Japanese text and comment
comment Comment block
gap empty line between English and Japanese
&lt;/code>&lt;/pre>
&lt;p>egtxt と jptxt を取り出せば英語版と日本語版の原稿になる。&lt;/p>
&lt;pre>&lt;code>$ greple -Msccc2 --retrieve egtxt
$ greple -Msccc2 --retrieve jptxt
&lt;/code>&lt;/pre>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;h3 id="用語チェック">用語チェック&lt;/h3>
&lt;p>次のコマンドでテキスト全体の用語チェックができる:&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --wordcheck --ed2
&lt;/code>&lt;/pre>
&lt;p>修正点を見る:&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --wordcheck --ed2 --diff | cdif (あるいは sdif)
&lt;/code>&lt;/pre>
&lt;h3 id="偽装と対応する原語を表示する">「偽装」と対応する原語を表示する&lt;/h3>
&lt;p>「偽装」含む行を表示する。&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --ed2 偽装
&lt;/code>&lt;/pre>
&lt;p>&lt;code>--egjp&lt;/code> を付けると対訳部分を表示する。&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --egjp --ed2 偽装
&lt;/code>&lt;/pre>
&lt;p>「偽装」を &lt;code>-r&lt;/code> で必須パターンとすると、他の検索パターンはオプショナルになる。
それぞれは別の色で表示される。&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --egjp --ed2 \
-r 偽装 \
-e 'spoof\w*' -e 'craft\w+' -e 'disguis\w+' -e 'subterfug\w+' -e 'redirect\w*'
&lt;/code>&lt;/pre>
&lt;p>パターンをまとめてもいいが、一つのパターンにマッチする文字列は同じ色で表示される。
&lt;code>--uc&lt;/code> (&lt;code>--uniqcolor&lt;/code>) を指定しすれば文字列毎に違う色が割当てられる。&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --egjp --ed2 --uc \
-r 偽装 \
--re '(?i:subterfug|disguis|craft|fake|spoof|redirect)\w*'
&lt;/code>&lt;/pre>
&lt;p>&lt;code>-e&lt;/code> (&lt;code>--and&lt;/code>) の代わりに &lt;code>-v&lt;/code> (&lt;code>--not&lt;/code>) を指定すると、いずれの単
語も含まれない部分だけが表示される。&lt;/p>
&lt;pre>&lt;code>greple -Msccc2 --egjp --ed2 \
-r 偽装 \
-v 'spoof\w*' -v 'craft\w+' -v 'disguis\w+' -v 'subterfug\w+' -v 'redirect\w*'
&lt;/code>&lt;/pre>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2014,2020 Kazumasa Utashiro&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Msubst</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/subst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/subst/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-subst/actions">&lt;img src="https://github.com/kaz-utashiro/greple-subst/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-subst">&lt;img src="https://badge.fury.io/pl/App-Greple-subst.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>subst - Greple module for text search and substitution&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 2.3104&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Msubst &amp;ndash;dict &lt;em>dictionary&lt;/em> [ options ]&lt;/p>
&lt;pre>&lt;code>Dictionary:
--dict dictionary file
--dictdata dictionary data
Check:
--check=[ng,ok,any,outstand,all,none]
--select=N
--linefold
--stat
--with-stat
--stat-style=[default,dict]
--stat-item={match,expect,number,ok,ng,dict}=[0,1]
--subst
--[no-]warn-overlap
--[no-]warn-include
File Update:
--diff
--diffcmd command
--create
--replace
--overwrite
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This &lt;strong>greple&lt;/strong> module supports check and substitution of text files
based on dictionary data.&lt;/p>
&lt;p>Dictionary file is given by &lt;strong>&amp;ndash;dict&lt;/strong> option and each line contains
matching pattern and expected string pairs.&lt;/p>
&lt;pre>&lt;code>greple -Msubst --dict DICT
&lt;/code>&lt;/pre>
&lt;p>If the dictionary file contains following data:&lt;/p>
&lt;pre>&lt;code>colou?r color
cent(er|re) center
&lt;/code>&lt;/pre>
&lt;p>above command finds the first pattern which does not match the second
string, that is &amp;ldquo;colour&amp;rdquo; and &amp;ldquo;centre&amp;rdquo; in this case.&lt;/p>
&lt;p>Field &lt;code>//&lt;/code> in dictionary data is ignored, so this file can be written
like this:&lt;/p>
&lt;pre>&lt;code>colou?r // color
cent(er|re) // center
&lt;/code>&lt;/pre>
&lt;p>You can use same file by &lt;strong>greple&lt;/strong>&amp;rsquo;s &lt;strong>-f&lt;/strong> option and string after
&lt;code>//&lt;/code> is ignored as a comment in that case.&lt;/p>
&lt;pre>&lt;code>greple -f DICT ...
&lt;/code>&lt;/pre>
&lt;p>Option &lt;strong>&amp;ndash;dictdata&lt;/strong> can be used to provide dictionary data in command
line.&lt;/p>
&lt;pre>&lt;code>greple --dictdata $'colou?r color\ncent(er|re) center\n'
&lt;/code>&lt;/pre>
&lt;p>Dictionary entry starting with a sharp sign (&lt;code>#&lt;/code>) is a comment and
ignored.&lt;/p>
&lt;h3 id="overlapped-pattern">Overlapped pattern&lt;/h3>
&lt;p>When the matched string is same or shorter than previously matched
string by another pattern, it is simply ignored (&lt;strong>&amp;ndash;no-warn-include&lt;/strong>
by default). So, if you have to declare conflicted patterns, place
the longer pattern earlier.&lt;/p>
&lt;p>If the matched string overlaps with previously matched string, it is
warned (&lt;strong>&amp;ndash;warn-overlap&lt;/strong> by default) and ignored.&lt;/p>
&lt;h3 id="terminal-color">Terminal color&lt;/h3>
&lt;p>This version uses &lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3Atermcolor">Getopt::EX::termcolor&lt;/a> module. It sets option
&lt;strong>&amp;ndash;light-screen&lt;/strong> or &lt;strong>&amp;ndash;dark-screen&lt;/strong> depending on the terminal on
which the command run, or &lt;strong>TERM_BGCOLOR&lt;/strong> environment variable.&lt;/p>
&lt;p>Some terminals (eg: &amp;ldquo;Apple_Terminal&amp;rdquo; or &amp;ldquo;iTerm&amp;rdquo;) are detected
automatically and no action is required. Otherwise set
&lt;strong>TERM_BGCOLOR&lt;/strong> environment to #000000 (black) to #FFFFFF (white)
digit depending on terminal background color.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dict&lt;/strong>=&lt;em>file&lt;/em>&lt;/p>
&lt;p>Specify dictionary file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dictdata&lt;/strong>=&lt;em>data&lt;/em>&lt;/p>
&lt;p>Specify dictionary data by text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;check&lt;/strong>=&lt;code>outstand&lt;/code>|&lt;code>ng&lt;/code>|&lt;code>ok&lt;/code>|&lt;code>any&lt;/code>|&lt;code>all&lt;/code>|&lt;code>none&lt;/code>&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;check&lt;/strong> takes argument from &lt;code>ng&lt;/code>, &lt;code>ok&lt;/code>, &lt;code>any&lt;/code>,
&lt;code>outstand&lt;/code>, &lt;code>all&lt;/code> and &lt;code>none&lt;/code>.&lt;/p>
&lt;p>With default value &lt;code>outstand&lt;/code>, command will show information about
both expected and unexpected words only when unexpected word was found
in the same file.&lt;/p>
&lt;p>With value &lt;code>ng&lt;/code>, command will show information about unexpected
words. With value &lt;code>ok&lt;/code>, you will get information about expected
words. Both with value &lt;code>any&lt;/code>.&lt;/p>
&lt;p>Value &lt;code>all&lt;/code> and &lt;code>none&lt;/code> make sense only when used with &lt;strong>&amp;ndash;stat&lt;/strong>
option, and display information about never matched pattern.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;select&lt;/strong>=&lt;em>N&lt;/em>&lt;/p>
&lt;p>Select _N_th entry from the dictionary. Argument is interpreted by
&lt;a href="https://metacpan.org/pod/Getopt%3A%3AEX%3A%3ANumbers">Getopt::EX::Numbers&lt;/a> module. Range can be defined like
&lt;strong>&amp;ndash;select&lt;/strong>=&lt;code>1:3,7:9&lt;/code>. You can get numbers by &lt;strong>&amp;ndash;stat&lt;/strong> option.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;linefold&lt;/strong>&lt;/p>
&lt;p>If the target data is folded in the middle of text, use &lt;strong>&amp;ndash;linefold&lt;/strong>
option. It creates regex patterns which matches string spread across
lines. Substituted text does not include newline, though. Because it
confuses regex behavior somewhat, avoid to use if possible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;stat&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;with-stat&lt;/strong>&lt;/p>
&lt;p>Print statistical information. Works with &lt;strong>&amp;ndash;check&lt;/strong> option.&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;with-stat&lt;/strong> print statistics after normal output, while
&lt;strong>&amp;ndash;stat&lt;/strong> print only statistics.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;stat-style&lt;/strong>=&lt;code>default&lt;/code>|&lt;code>dict&lt;/code>&lt;/p>
&lt;p>Using &lt;strong>&amp;ndash;stat-style=dict&lt;/strong> option with &lt;strong>&amp;ndash;stat&lt;/strong> and &lt;strong>&amp;ndash;check=any&lt;/strong>,
you can get dictionary style output for your working document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;stat-item&lt;/strong> &lt;em>item&lt;/em>=[0,1]&lt;/p>
&lt;p>Specify which item is shown up in stat information. Default values
are:&lt;/p>
&lt;pre>&lt;code> match=1
expect=1
number=1
ng=1
ok=1
dict=0
&lt;/code>&lt;/pre>
&lt;p>If you don&amp;rsquo;t need to see pattern field, use like this:&lt;/p>
&lt;pre>&lt;code> --stat-item match=0
&lt;/code>&lt;/pre>
&lt;p>Multiple parameters can be set at once:&lt;/p>
&lt;pre>&lt;code> --stat-item match=number=0,ng=1,ok=1
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;subst&lt;/strong>&lt;/p>
&lt;p>Substitute unexpected matched pattern to expected string. Newline
character in the matched string is ignored. Pattern without
replacement string is not changed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no-]warn-overlap&lt;/strong>&lt;/p>
&lt;p>Warn overlapped pattern.
Default on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;[no-]warn-include&lt;/strong>&lt;/p>
&lt;p>Warn included pattern.
Default off.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="file-update-options">FILE UPDATE OPTIONS&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;diff&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;diffcmd&lt;/strong>=&lt;em>command&lt;/em>&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;diff&lt;/strong> produce diff output of original and converted text.&lt;/p>
&lt;p>Specify diff command name used by &lt;strong>&amp;ndash;diff&lt;/strong> option. Default is &amp;ldquo;diff
-u&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;create&lt;/strong>&lt;/p>
&lt;p>Create new file and write the result. Suffix &amp;ldquo;.new&amp;rdquo; is appended to
original filename.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;replace&lt;/strong>&lt;/p>
&lt;p>Replace the target file by converted result. Original file is renamed
to backup name with &amp;ldquo;.bak&amp;rdquo; suffix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;overwrite&lt;/strong>&lt;/p>
&lt;p>Overwrite the target file by converted result with no backup.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="dictionary">DICTIONARY&lt;/h2>
&lt;p>This module includes example dictionaries. They are installed share
directory and accessed by &lt;strong>&amp;ndash;exdict&lt;/strong> option.&lt;/p>
&lt;pre>&lt;code>greple -Msubst --exdict jtca-katakana-guide-3.dict
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exdict&lt;/strong> &lt;em>dictionary&lt;/em>&lt;/p>
&lt;p>Use &lt;em>dictionary&lt;/em> flie in the distribution as a dictionary file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exdictdir&lt;/strong>&lt;/p>
&lt;p>Show dictionary directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exdict&lt;/strong> jtca-katakana-guide-3.dict&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;jtca-katakana-guide&lt;/strong>&lt;/p>
&lt;p>Created from following guideline document.&lt;/p>
&lt;pre>&lt;code> 外来語（カタカナ）表記ガイドライン 第3版
制定：2015年8月
発行：2015年9月
一般財団法人テクニカルコミュニケーター協会
Japan Technical Communicators Association
https://www.jtca.org/standardization/katakana_guide_3_20171222.pdf
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;jtca&lt;/strong>&lt;/p>
&lt;p>Customized &lt;strong>&amp;ndash;jtca-katakana-guide&lt;/strong>. Original dictionary is
automatically generated from published data. This dictionary is
customized for practical use.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exdict&lt;/strong> jtf-style-guide-3.dict&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;jtf-style-guide&lt;/strong>&lt;/p>
&lt;p>Created from following guideline document.&lt;/p>
&lt;pre>&lt;code> JTF日本語標準スタイルガイド（翻訳用）
第3.0版
2019年8月20日
一般社団法人 日本翻訳連盟（JTF）
翻訳品質委員会
https://www.jtf.jp/jp/style_guide/pdf/jtf_style_guide.pdf
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;jtf&lt;/strong>&lt;/p>
&lt;p>Customized &lt;strong>&amp;ndash;jtf-style-guide&lt;/strong>. Original dictionary is automatically
generated from published data. This dictionary is customized for
practical use.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exdict&lt;/strong> sccc2.dict&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;sccc2&lt;/strong>&lt;/p>
&lt;p>Dictionary used for &amp;ldquo;C/C++ セキュアコーディング 第2版&amp;rdquo; published in
2014.&lt;/p>
&lt;pre>&lt;code> https://www.jpcert.or.jp/securecoding_book_2nd.html
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exdict&lt;/strong> ms-style-guide.dict&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;ms-style-guide&lt;/strong>&lt;/p>
&lt;p>Dictionary generated from Microsoft localization style guide.&lt;/p>
&lt;pre>&lt;code> https://www.microsoft.com/ja-jp/language/styleguides
&lt;/code>&lt;/pre>
&lt;p>Data is generated from this article:&lt;/p>
&lt;pre>&lt;code> https://www.atmarkit.co.jp/news/200807/25/microsoft.html
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;microsoft&lt;/strong>&lt;/p>
&lt;p>Customized &lt;strong>&amp;ndash;ms-style-guide&lt;/strong>. Original dictionary is automatically
generated from published data. This dictionary is customized for
practical use.&lt;/p>
&lt;p>Amendment dictionary can be found
&lt;a href="https://github.com/kaz-utashiro/greple-subst/blob/master/share/ms-amend.dict">here&lt;/a>.
Please raise an issue or send a pull-request if you have request to update.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="japanese">JAPANESE&lt;/h2>
&lt;p>This module is originaly made for Japanese text editing support.&lt;/p>
&lt;h3 id="katakana">KATAKANA&lt;/h3>
&lt;p>Japanese KATAKANA word have a lot of variants to describe same word,
so unification is important but it&amp;rsquo;s quite tiresome work. In the next
example,&lt;/p>
&lt;pre>&lt;code>イ[エー]ハトー?([ヴブボ]ォ?) // イーハトーヴォ
&lt;/code>&lt;/pre>
&lt;p>left pattern matches all following words.&lt;/p>
&lt;pre>&lt;code>イエハトブ
イーハトヴ
イーハトーヴ
イーハトーヴォ
イーハトーボ
イーハトーブ
&lt;/code>&lt;/pre>
&lt;p>This module helps to detect and correct them.&lt;/p>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;pre>&lt;code>$ cpanm App::Greple::subst
&lt;/code>&lt;/pre>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-subst">https://github.com/kaz-utashiro/greple-subst&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-update">https://github.com/kaz-utashiro/greple-update&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jtca.org/standardization/katakana_guide_3_20171222.pdf">https://www.jtca.org/standardization/katakana_guide_3_20171222.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jtf.jp/jp/style_guide/styleguide_top.html">https://www.jtf.jp/jp/style_guide/styleguide_top.html&lt;/a>,
&lt;a href="https://www.jtf.jp/jp/style_guide/pdf/jtf_style_guide.pdf">https://www.jtf.jp/jp/style_guide/pdf/jtf_style_guide.pdf&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.microsoft.com/ja-jp/language/styleguides">https://www.microsoft.com/ja-jp/language/styleguides&lt;/a>,
&lt;a href="https://www.atmarkit.co.jp/news/200807/25/microsoft.html">https://www.atmarkit.co.jp/news/200807/25/microsoft.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.bunka.go.jp/kokugo_nihongo/sisaku/joho/joho/kijun/naikaku/gairai/index.html">文化庁 国語施策・日本語教育 国語施策情報 内閣告示・内閣訓令 外来語の表記&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://qiita.com/kaz-utashiro/items/85add653a71a7e01c415">https://qiita.com/kaz-utashiro/items/85add653a71a7e01c415&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%BC%E3%83%8F%E3%83%88%E3%83%BC%E3%83%96">イーハトーブ&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2017-2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Msubst-desumasu</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/subst-desumasu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/subst-desumasu/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-subst-desumasu/actions">&lt;img src="https://github.com/kaz-utashiro/greple-subst-desumasu/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-subst-desumasu">&lt;img src="https://badge.fury.io/pl/App-Greple-subst-desumasu.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::subst::desumasu - Japanese DESU/MASU dictionary for App::Greple::subst&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;pre>&lt;code>greple -Msubst::desumasu --dearu --subst --all file
greple -Msubst::desumasu --dearu --diff file
greple -Msubst::desumasu --dearu --replace file
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>greple -Msubst module based on
&lt;a href="https://github.com/kssfilo/desumasu-converter">desumasu-converter&lt;/a>.&lt;/p>
&lt;p>This is a simple checker/converter module for Japanese writing style
so called DUSU/MASU (ですます調: 敬体) and DEARU (である調: 常体).
This is not my own idea and the dictionary is based on
&lt;a href="https://github.com/kssfilo/desumasu-converter">https://github.com/kssfilo/desumasu-converter&lt;/a>.&lt;/p>
&lt;p>See article &lt;a href="https://kanasys.com/tech/722">https://kanasys.com/tech/722&lt;/a> for detail.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dearu&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dearu-n&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;dearu-N&lt;/strong>&lt;/p>
&lt;p>Convert DESU/MASU to DEARU style.&lt;/p>
&lt;p>DESU (です) and MASU (ます) sometimes followed by NE (ね) in frank
situation, and that NE (ね) is removed from converted result by
default. Option with &lt;strong>-n&lt;/strong> keep that NE (ね), and option with &lt;strong>-N&lt;/strong>
igonore them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;desumasu&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;desumasu-n&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;desumasu-N&lt;/strong>&lt;/p>
&lt;p>Convert DEARU to DESU/MASU style.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Use them with &lt;strong>greple&lt;/strong> &lt;strong>-Msubst&lt;/strong> options.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;subst &amp;ndash;all &amp;ndash;no-color&lt;/strong>&lt;/p>
&lt;p>Print converted text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;diff&lt;/strong>&lt;/p>
&lt;p>Produce diff output of original and converted text. Use &lt;strong>cdif&lt;/strong>
command in &lt;a href="https://metacpan.org/pod/App%3A%3Asdif">App::sdif&lt;/a> to visualize the difference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;create&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;replace&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;overwrite&lt;/strong>&lt;/p>
&lt;p>To update the file, use these options. Option &lt;strong>&amp;ndash;create&lt;/strong> make new
file with &lt;code>.new&lt;/code> suffix. Option &lt;strong>&amp;ndash;replace&lt;/strong> update the target file
with backup, while option &lt;strong>&amp;ndash;overwrite&lt;/strong> does without backup.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>See &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Asubst">App::Greple::subst&lt;/a> for other options.&lt;/p>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;p>From CPAN:&lt;/p>
&lt;pre>&lt;code>cpanm App::Greple::subst::desumasu
&lt;/code>&lt;/pre>
&lt;p>From GIT repository:&lt;/p>
&lt;pre>&lt;code>cpanm https://github.com/kaz-utashiro/greple-subst-desumasu.git
&lt;/code>&lt;/pre>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>, &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Asubst">App::Greple::subst&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3Asdif">App::sdif&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kssfilo/desumasu-converter">https://github.com/kssfilo/desumasu-converter&lt;/a>,
&lt;a href="https://kanasys.com/tech/722">https://kanasys.com/tech/722&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://qiita.com/kaz-utashiro/items/8f4878300043ce7b73e7">greple で「ですます調」を「である化」する&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2021-2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mtel</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/tel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/tel/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-tel/actions">&lt;img src="https://github.com/kaz-utashiro/greple-tel/workflows/test/badge.svg" alt="Actions Status">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>tel - Module to support simple telephone/address data file&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.01&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mtel [ options ]&lt;/p>
&lt;h2 id="samples">SAMPLES&lt;/h2>
&lt;p>greple -Mtel pattern&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>Sample module for &lt;strong>greple&lt;/strong> command supporting simple telephone /
address data file.&lt;/p>
&lt;h2 id="format">FORMAT&lt;/h2>
&lt;p>NAME, TEL, ADDRESS fields are separated by tab.&lt;/p>
&lt;p>The line start with space is continuous line.&lt;/p>
&lt;p>[ keyword1, keyword2, &amp;hellip; ]&lt;/p>
&lt;p>&amp;lt; string to be printed &amp;gt;&lt;/p>
&lt;pre>&lt;code>[travel,airline]UA Reservations 800-241-6522
[travel,airline]UA Premier Reservations
03-3817-4441 Japan
800-356-8900 US and Canada
008-025-808 Australia
810-1308 Hong Kong
02-325-9914 Korea
09-358-3500 New Zealand
810-4356 Philippines
321-8888 Singapore
02-325-9914 Taiwan
[travel,airline]UA Premier Exective
800-225-8900 Reservations
800-325-0046 Service Desk
Kokkai Gijidou, The National Diet &amp;lt;国会議事堂&amp;gt;
03-5521-7445 100-0014 東京都千代田区永田町1-7-1
&lt;/code>&lt;/pre>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright (C) Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p></description></item><item><title>Docs: greple -Mtype</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/type/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-type/actions">&lt;img src="https://github.com/kaz-utashiro/greple-type/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-type">&lt;img src="https://badge.fury.io/pl/App-Greple-type.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::type - file type filter module for greple&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;pre>&lt;code>greple -Mdig -Mtype --type-xxxx ... --dig .
&lt;/code>&lt;/pre>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This module filters search target files by given rule. It is
convenient to use with other &lt;strong>greple&lt;/strong> module which support recursive
or multi-file search such as &lt;strong>-Mfind&lt;/strong>, &lt;strong>-Mdig&lt;/strong> or &lt;strong>-Mgit&lt;/strong>.&lt;/p>
&lt;p>For example, option for Perl is defined as this:&lt;/p>
&lt;pre>&lt;code>option --type-perl \
--suffix=pl,PL,pm,pod,t,psgi \
--shebang=perl
&lt;/code>&lt;/pre>
&lt;p>Using this option, only files those name end with &lt;strong>&amp;ndash;suffix&lt;/strong> option
or files which contains string &lt;code>perl&lt;/code> in the first &lt;code>#!&lt;/code> (shebang)
line will be searched.&lt;/p>
&lt;p>Option &lt;strong>&amp;ndash;suffix&lt;/strong> and &lt;strong>&amp;ndash;shebang&lt;/strong> are defined in
&lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Aselect">App::Greple::select&lt;/a> module.&lt;/p>
&lt;h2 id="short-name">SHORT NAME&lt;/h2>
&lt;p>Calling module as &lt;strong>-Mtype::config(short)&lt;/strong> or &lt;strong>-Mtype::config=short&lt;/strong>
introduce short name for rule options. When short name mode is
activated, all &lt;strong>&amp;ndash;type-xxxx&lt;/strong> options can be used as &lt;strong>&amp;ndash;xxxx&lt;/strong> as
well.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;pre>&lt;code>option --type-actionscript --suffix=as,mxml
option --type-ada --suffix=ada,adb,ads
option --type-asm --suffix=asm,s
option --type-asp --suffix=asp
option --type-aspx --suffix=master,ascx,asmx,aspx,svc
option --type-batch --suffix=bat,cmd
option --type-cc --suffix=c,h,xs
option --type-cfmx --suffix=cfc,cfm,cfml
option --type-clojure --suffix=clj
option --type-cmake --suffix=cmake --select-name=^CMakeLists.txt$
option --type-coffeescript --suffix=coffee
option --type-cpp --suffix=cpp,cc,cxx,m,hpp,hh,h,hxx,c++,h++
option --type-csharp --suffix=cs
option --type-css --suffix=css
option --type-dart --suffix=dart
option --type-delphi --suffix=pas,int,dfm,nfm,dof,dpk,dproj,groupproj,bdsgroup,bdsproj
option --type-elisp --suffix=el
option --type-elixir --suffix=ex,exs
option --type-erlang --suffix=erl,hrl
option --type-fortran --suffix=f,f77,f90,f95,f03,for,ftn,fpp
option --type-go --suffix=go
option --type-groovy --suffix=groovy,gtmpl,gpp,grunit,gradle
option --type-haskell --suffix=hs,lhs
option --type-hh --suffix=h
option --type-html --suffix=htm,html
option --type-java --suffix=java,properties
option --type-js --suffix=js
option --type-json --suffix=json
option --type-jsp --suffix=jsp,jspx,jhtm,jhtml
option --type-less --suffix=less
option --type-lisp --suffix=lisp,lsp
option --type-lua --suffix=lua --shebng=lua
option --type-markdown --suffix=md
option --type-md --type-markdown
option --type-make --suffix=mak,mk --select-name=^(GNUmakefile|Makefile|makefile)$
option --type-matlab --suffix=m
option --type-objc --suffix=m,h
option --type-objcpp --suffix=mm,h
option --type-ocaml --suffix=ml,mli
option --type-parrot --suffix=pir,pasm,pmc,ops,pod,pg,tg
option --type-perl --suffix=pl,PL,pm,pod,t,psgi --shebang=perl
option --type-perltest --suffix=t
option --type-php --suffix=php,phpt,php3,php4,php5,phtml --shebang=php
option --type-plone --suffix=pt,cpt,metadata,cpy,py
option --type-python --suffix=py --shebang=python
option --type-rake --select-name=^Rakefile$
option --type-rr --suffix=R
option --type-ruby --suffix=rb,rhtml,rjs,rxml,erb,rake,spec \
--select-name=^Rakefile$ --shebang=ruby
option --type-rust --suffix=rs
option --type-sass --suffix=sass,scss
option --type-scala --suffix=scala
option --type-scheme --suffix=scm,ss
option --type-shell --suffix=sh,bash,csh,tcsh,ksh,zsh,fish \
--shebang=sh,bash,csh,tcsh,ksh,zsh,fish
option --type-smalltalk --suffix=st
option --type-sql --suffix=sql,ctl
option --type-tcl --suffix=tcl,itcl,itk
option --type-tex --suffix=tex,cls,sty
option --type-tt --suffix=tt,tt2,ttml
option --type-vb --suffix=bas,cls,frm,ctl,vb,resx
option --type-verilog --suffix=v,vh,sv
option --type-vim --suffix=vim
option --type-xml --suffix=xml,dtd,xsl,xslt,ent --select-data='\A.*&amp;lt;[?]xml'
option --type-yaml --suffix=yaml,yml
&lt;/code>&lt;/pre>
&lt;h2 id="background">BACKGROUND&lt;/h2>
&lt;p>This module is inspired by &lt;a href="https://metacpan.org/pod/App%3A%3AGre">App::Gre&lt;/a> command, and original matching
rule is taken from it.&lt;/p>
&lt;p>Filename matching can be done with &lt;strong>-Mfind&lt;/strong> module, but to know file
type from its content, different mechanism was required. So I made
the &lt;strong>&amp;ndash;begin&lt;/strong> function can die to stop the file processing, and
introduced new &lt;strong>-Mselect&lt;/strong> module.&lt;/p>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>, &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Aselect">App::Greple::select&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGre">App::Gre&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2021-2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mupdate</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/update/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-update/actions">&lt;img src="https://github.com/kaz-utashiro/greple-update/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-update">&lt;img src="https://badge.fury.io/pl/App-Greple-update.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>update - Greple module to update file content&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mupdate&lt;/p>
&lt;p>Options:&lt;/p>
&lt;pre>&lt;code>--update replace file content
--with-backup make backup files
--diff produce diff output
--U# specify unified diff context length
&lt;/code>&lt;/pre>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.03&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This &lt;strong>greple&lt;/strong> module substitute the target file content by command
output. For example, next command replace all words in the file to
uppercase.&lt;/p>
&lt;pre>&lt;code>greple -Mupdate '\w+' --cm 'sub{uc}' --update file
&lt;/code>&lt;/pre>
&lt;p>Above is a very simple example but you can implement arbitrarily
complex function in conjunction with other various &lt;strong>greple&lt;/strong> options.&lt;/p>
&lt;p>You can check how the file will be edited by &lt;strong>&amp;ndash;diff&lt;/strong> option.&lt;/p>
&lt;pre>&lt;code>greple -Mupdate '\w+' --cm 'sub{uc}' --diff file
&lt;/code>&lt;/pre>
&lt;p>Command &lt;strong>sdif&lt;/strong> or &lt;strong>cdif&lt;/strong> would be useful to see the difference
visually.&lt;/p>
&lt;pre>&lt;code>greple -Mupdate '\w+' --cm 'sub{uc}' --diff file | cdif
&lt;/code>&lt;/pre>
&lt;p>This module has been spun off from &lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Asubst">App::Greple::subst&lt;/a> module.
Consult it for more practical use case.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;update&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;update::update&lt;/strong>&lt;/p>
&lt;p>Update the target file by command output. Entire file content is
produced and any color effects are canceled. Without this option,
&lt;strong>greple&lt;/strong> behaves as normal operation, that means only matched lines
are printed.&lt;/p>
&lt;p>File is not touched as far as its content does not change.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;with-backup&lt;/strong>[=&lt;em>suffix&lt;/em>]&lt;/p>
&lt;p>Backup original file with &lt;code>.bak&lt;/code> suffix. If optional parameter is
given, it is used as a suffix string. If the file exists, &lt;code>.bak_1&lt;/code>,
&lt;code>.bak_2&lt;/code> &amp;hellip; are used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;diff&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;update::diff&lt;/strong>&lt;/p>
&lt;p>Option &lt;strong>-diff&lt;/strong> produce diff output of original and converted text.
Option &lt;strong>-U#&lt;/strong> can be used to specify context length.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;pre>&lt;code>$ cpanm App::Greple::update
&lt;/code>&lt;/pre>
&lt;h3 id="github">GITHUB&lt;/h3>
&lt;pre>&lt;code>$ cpanm https://github.com/kaz-utashiro/greple-update.git
&lt;/code>&lt;/pre>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Aupdate">App::Greple::update&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple-update">https://github.com/kaz-utashiro/greple-update&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Asubst">App::Greple::subst&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple-subst">https://github.com/kaz-utashiro/greple-subst&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3Asdif">App::sdif&lt;/a>, &lt;a href="https://metacpan.org/pod/App%3A%3Acdif">App::cdif&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mwordle</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/wordle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/wordle/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-wordle/actions">&lt;img src="https://github.com/kaz-utashiro/greple-wordle/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-wordle">&lt;img src="https://badge.fury.io/pl/App-Greple-wordle.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::wordle - wordle module for greple&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mwordle&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>App::Greple::wordle is a greple module which implements wordle game.
Correctness is checked by regular expression.&lt;/p>
&lt;p>Rule is almost same as the original game but answer is different. Use
&lt;strong>&amp;ndash;compat&lt;/strong> option to get compatible answer.&lt;/p>
&lt;div>
&lt;p>&lt;img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/greple-wordle/main/images/screen-5.png">
&lt;/div>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;series&lt;/strong>=#, &lt;strong>-s&lt;/strong>#&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;compat&lt;/strong>&lt;/p>
&lt;p>Choose different series of answer. Default 1. Series zero is same as
the original game and option &lt;strong>&amp;ndash;compat&lt;/strong> is a short cut for
&lt;strong>&amp;ndash;series=0&lt;/strong>. If it is not zero, original answer word set is
shuffled by pseudo random numbers using series number as an initial
seed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;index&lt;/strong>=#, &lt;strong>-n&lt;/strong>#&lt;/p>
&lt;p>Specify index. Default index is calculated from days from 2021/06/19.
If the value is negative and you can get yesterday&amp;rsquo;s question by
giving -1.&lt;/p>
&lt;p>Answer for option &lt;strong>-s0n0&lt;/strong> is &lt;code>cigar&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;&lt;/strong>[&lt;strong>no-&lt;/strong>]&lt;strong>result&lt;/strong>&lt;/p>
&lt;p>Show result when succeeded. Default true.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;random&lt;/strong>&lt;/p>
&lt;p>Generate random index every time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;trial&lt;/strong>=#, &lt;strong>-x&lt;/strong>=#&lt;/p>
&lt;p>Set trial count. Default 6.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="commands">COMMANDS&lt;/h2>
&lt;p>Five letter word is processed as an answer. Some other input is taken
as a command.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>h&lt;/strong>, &lt;strong>hint&lt;/strong>&lt;/p>
&lt;p>List possible words.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>u&lt;/strong>, &lt;strong>uniq&lt;/strong>&lt;/p>
&lt;p>List possible words made of unique characters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>=&lt;/strong>&lt;em>chars&lt;/em>&lt;/p>
&lt;p>If start with equal (&lt;code>=&lt;/code>), list words which include all of &lt;em>chars&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>!&lt;/strong>&lt;em>chars&lt;/em>&lt;/p>
&lt;p>If start with exclamation mark (&lt;code>!&lt;/code>), list words which does not
include any of &lt;em>chars&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>regex&lt;/em>&lt;/p>
&lt;p>Any other string include non-alphabetical character is taken as a
regular expression to filter words.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>!!&lt;/strong>&lt;/p>
&lt;p>Get word list produced by the last command execution.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>These commands can be connected in series. For example, next command
show possible words start with letter &lt;code>z&lt;/code>.&lt;/p>
&lt;pre>&lt;code>hint ^z
&lt;/code>&lt;/pre>
&lt;p>Next shows all words which does not incude any letter of &lt;code>audio&lt;/code> and
&lt;code>rents&lt;/code>, and made of unique characters.&lt;/p>
&lt;pre>&lt;code>!audio !rents u
&lt;/code>&lt;/pre>
&lt;h2 id="example">EXAMPLE&lt;/h2>
&lt;pre>&lt;code>1: solid # try word &amp;quot;solid&amp;quot;
2: panic # try word &amp;quot;panic&amp;quot;
3: hint # show hint
3: !solid !panic =eft uniq # search word exclude(solidpanic) include(eft)
3: wheft # try word &amp;quot;wheft&amp;quot;
4: hint # show hint
4: datum # try word &amp;quot;datum&amp;quot;
5: tardy # try word &amp;quot;tardy&amp;quot;
&lt;/code>&lt;/pre>
&lt;div>
&lt;p>&lt;img width="750" src="https://raw.githubusercontent.com/kaz-utashiro/greple-wordle/main/images/hint-1.png">
&lt;/div>
&lt;h2 id="bugs">BUGS&lt;/h2>
&lt;p>Wrong position character is colored yellow always, even if it is
colored green in other position.&lt;/p>
&lt;h2 id="install">INSTALL&lt;/h2>
&lt;h3 id="cpanminus">CPANMINUS&lt;/h3>
&lt;pre>&lt;code>$ cpanm App::Greple::wordle
or
$ curl -sL http://cpanmin.us | perl - App::Greple::wordle
&lt;/code>&lt;/pre>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple%3A%3Awordle">App::Greple::wordle&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple-wordle">https://github.com/kaz-utashiro/greple-wordle&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metacpan.org/pod/App%3A%3AGreple">App::Greple&lt;/a>, &lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://qiita.com/kaz-utashiro/items/ba6696187f2ce902aa39">https://qiita.com/kaz-utashiro/items/ba6696187f2ce902aa39&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/alex1770/wordle">https://github.com/alex1770/wordle&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2022 Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item><item><title>Docs: greple -Mxp</title><link>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/xp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kaz-utashiro.github.io/Greple-Home/docs/manuals/xp/</guid><description>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-xp/actions">&lt;img src="https://github.com/kaz-utashiro/greple-xp/workflows/test/badge.svg" alt="Actions Status">&lt;/a> &lt;a href="https://metacpan.org/release/App-Greple-xp">&lt;img src="https://badge.fury.io/pl/App-Greple-xp.svg" alt="MetaCPAN Release">&lt;/a>&lt;/p>
&lt;h2 id="name">NAME&lt;/h2>
&lt;p>App::Greple::xp - extended pattern module&lt;/p>
&lt;h2 id="version">VERSION&lt;/h2>
&lt;p>Version 0.04&lt;/p>
&lt;h2 id="synopsis">SYNOPSIS&lt;/h2>
&lt;p>greple -Mxp&lt;/p>
&lt;h2 id="description">DESCRIPTION&lt;/h2>
&lt;p>This module provides functions those can be used by &lt;strong>greple&lt;/strong> pattern
and region options.&lt;/p>
&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;le-pattern&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;inside-pattern&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;outside-pattern&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;include-pattern&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exclude-pattern&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;p>Read file contents and use each lines as a pattern for options.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;le-string&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;inside-string&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;outside-string&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;include-string&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;exclude-string&lt;/strong> &lt;em>file&lt;/em>&lt;/p>
&lt;p>Almost same as &lt;strong>*-pattern&lt;/strong> option but each line is concidered as a
fixed string rather than regular expression.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="comment">COMMENT&lt;/h3>
&lt;p>You can insert comment lines in pattern file. As for fixed string
file, there is no way to write comment.&lt;/p>
&lt;p>Lines start with hash mark (&lt;code>#&lt;/code>) is ignored as a comment line.&lt;/p>
&lt;p>String after double slash (&lt;code>//&lt;/code>) is also ignored with preceding
spaces.&lt;/p>
&lt;h3 id="wild-card">WILD CARD&lt;/h3>
&lt;p>Because &lt;em>file&lt;/em> parameter is globbed, you can use wild card to give
multiple files. If nothing matched to the wild card, this option is
simply ignored with no message.&lt;/p>
&lt;pre>&lt;code>$ greple -Mxp --exclude-pattern '*.exclude' ...
&lt;/code>&lt;/pre>
&lt;h2 id="see-also">SEE ALSO&lt;/h2>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple">https://github.com/kaz-utashiro/greple&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/kaz-utashiro/greple-xp">https://github.com/kaz-utashiro/greple-xp&lt;/a>&lt;/p>
&lt;h2 id="author">AUTHOR&lt;/h2>
&lt;p>Kazumasa Utashiro&lt;/p>
&lt;h2 id="license">LICENSE&lt;/h2>
&lt;p>Copyright 2019- Kazumasa Utashiro.&lt;/p>
&lt;p>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.&lt;/p></description></item></channel></rss>